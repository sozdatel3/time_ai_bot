import asyncio
import re
from datetime import datetime
from pathlib import Path

from aiogram import Bot, F
from aiogram.types import ContentType, FSInputFile, Message
from aiogram_dialog import Dialog, DialogManager, ShowMode, Window
from aiogram_dialog.widgets.input import MessageInput, TextInput
from aiogram_dialog.widgets.kbd import Button, Row
from aiogram_dialog.widgets.media import DynamicMedia
from aiogram_dialog.widgets.text import Const, Format

from config.config import get_config, load_config
from db.models.asto_info import set_astro_info, set_natal_json, set_natal_svg

# from utils.attachments import get_pay_photo_attachment
from db.models.old_workflow.big_mes import get_pay_photo_attachment
from db.models.user import (
    decrease_free_predictions_count,
    get_free_predictions_count,
    get_user_balance,
)

# from dialogs.payment import start_payment
from dialogs.states import (
    AstroStates,
    PaymentStates,
    YogaClubStates,
    format_price,
    get_price_for_user,
)
from utils.geocoding import GeocodingService
from utils.openai_helper import generate_numerology_prediction
from widgets.date_picker import DatePicker
from widgets.time_picker import TimePicker

ADMIN_IDS = load_config().admin_ids


def fix_html_tags_simple(text: str) -> str:
    """
    –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTML —Ç–µ–≥–æ–≤ - –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞.
    """
    if not text.strip():
        return text

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ HTML —Ç–µ–≥–∏ –≤ Telegram
    supported_tags = ["b", "i", "u", "s", "code", "pre", "a"]

    # –°—Ç–µ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–µ–≥–æ–≤
    tag_stack = []

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ HTML —Ç–µ–≥–æ–≤
    tag_pattern = r"<(/?)(\w+)(?:\s[^>]*)?>"

    for match in re.finditer(tag_pattern, text):
        is_closing = bool(match.group(1))
        tag_name = match.group(2).lower()

        if tag_name not in supported_tags:
            continue

        if is_closing:
            # –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ - —É–±–∏—Ä–∞–µ–º –∏–∑ —Å—Ç–µ–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if tag_name in tag_stack:
                tag_stack.remove(tag_name)
        else:
            # –û—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–µ–∫
            tag_stack.append(tag_name)

    # –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ
    result = text
    for tag in reversed(tag_stack):
        result += f"</{tag}>"

    return result


def split_text_simple(text: str, max_length: int = 4000) -> list:
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º HTML.
    """
    if len(text) <= max_length:
        return [fix_html_tags_simple(text)]

    pages = []
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∞–±–∑–∞—Ü–∞–º
    paragraphs = text.split("\n\n")
    current_page = ""

    for paragraph in paragraphs:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –∞–±–∑–∞—Ü
        test_text = current_page + ("\n\n" if current_page else "") + paragraph

        if len(test_text) <= max_length:
            current_page = test_text
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
            if current_page:
                pages.append(fix_html_tags_simple(current_page))
                current_page = paragraph
            else:
                # –ê–±–∑–∞—Ü —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π - —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                sentences = paragraph.split(". ")
                for i, sentence in enumerate(sentences):
                    if i < len(sentences) - 1:
                        sentence += ". "

                    test_sentence = (
                        current_page + (" " if current_page else "") + sentence
                    )

                    if len(test_sentence) <= max_length:
                        current_page += (
                            " " if current_page else ""
                        ) + sentence
                    else:
                        if current_page:
                            pages.append(fix_html_tags_simple(current_page))
                            current_page = sentence
                        else:
                            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
                            pages.append(fix_html_tags_simple(sentence))

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if current_page:
        pages.append(fix_html_tags_simple(current_page))

    return pages if pages else [fix_html_tags_simple(text)]


async def process_name(
    message: Message, widget, dialog_manager: DialogManager, name: str
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # print("BURDAAA", message.text)
    dialog_manager.dialog_data["name"] = message.text
    try:
        await message.delete()
    except Exception as e:
        print("BURDAAA 1", e)
    await dialog_manager.next(show_mode=ShowMode.DELETE_AND_SEND)


async def on_date_selected(
    event, widget, dialog_manager: DialogManager, selected_date
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    dialog_manager.dialog_data["birth_date"] = selected_date.isoformat()
    # await message.delete()
    await dialog_manager.next(show_mode=ShowMode.EDIT)


async def on_time_selected(
    event, widget, dialog_manager: DialogManager, selected_time
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    if selected_time:
        dialog_manager.dialog_data["birth_time"] = selected_time.isoformat()
    else:
        dialog_manager.dialog_data["birth_time"] = None
    await dialog_manager.next(show_mode=ShowMode.EDIT)


async def process_location(
    message: Message, widget, dialog_manager: DialogManager, **_
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏"""
    if dialog_manager.dialog_data.get("error_message"):
        try:
            await dialog_manager.dialog_data["error_message"].delete()
        except Exception as e:
            print("BURDAAA 6", e)
        dialog_manager.dialog_data["error_message"] = None

    if message.text:
        geocoding = GeocodingService()
        location_info = await geocoding.get_location_from_query(message.text)
        if location_info:
            dialog_manager.dialog_data["location_info"] = {
                "city": location_info.city,
                "country": location_info.country,
                "full_address": location_info.full_address,
                "formatted": geocoding.format_location_string(location_info),
            }
            await message.delete()
            await dialog_manager.next(show_mode=ShowMode.DELETE_AND_SEND)
            return
        else:
            dialog_manager.dialog_data["error_message"] = await message.answer(
                """<i>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.</i>"""
            )
            try:
                await message.delete()
            except Exception as e:
                print("BURDAAA 5", e)
            await dialog_manager.update(show_mode=ShowMode.DELETE_AND_SEND)
            return

    if message.location:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        dialog_manager.dialog_data["lat"] = message.location.latitude
        dialog_manager.dialog_data["lng"] = message.location.longitude
        # print(
        #     "lat=",
        #     message.location.latitude,
        #     "lng=",
        #     message.location.longitude,
        # )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ
        geocoding = GeocodingService()
        location_info = await geocoding.get_location_info(
            message.location.latitude, message.location.longitude
        )

        if location_info:
            dialog_manager.dialog_data["location_info"] = {
                "city": location_info.city,
                "country": location_info.country,
                "full_address": location_info.full_address,
                "formatted": geocoding.format_location_string(location_info),
            }
            await message.delete()
            await dialog_manager.next(show_mode=ShowMode.DELETE_AND_SEND)
        else:
            # await message.answer(
            #     "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. "
            #     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑."
            # )
            return
    else:
        # await message.answer(
        #     "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üìé -> üìç –õ–æ–∫–∞—Ü–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–æ–¥–∏–ª–∏—Å—å"
        # )
        dialog_manager.dialog_data["error_message"] = await message.answer(
            """<i>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.</i>"""
        )
        try:
            await message.delete()
        except Exception as e:
            print("BURDAAA 5", e)
        await dialog_manager.update(show_mode=ShowMode.DELETE_AND_SEND)
        return


async def get_confirmation_text(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    # print("BURDAAA 2", dialog_manager.dialog_data)
    try:
        data = dialog_manager.dialog_data

        name = data.get("name", "")
        birth_date = datetime.fromisoformat(data.get("birth_date", ""))
        birth_time = data.get("birth_time")

        # text = "‚ú® <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        # text += f"üë§ <b>–ò–º—è:</b> \n"
        # text += f"üìÖ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> \n"
        if birth_time:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏, –∞ –Ω–µ –∫–∞–∫ datetime
            from datetime import time

            time_obj = time.fromisoformat(birth_time)
            time_str = f"{time_obj.strftime('%H:%M')}"
        else:
            time_str = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        text = f"""
<i><b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>

</i><i>‚Üí –ò–º—è: {name}
</i><i>‚Üí –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date.strftime('%d.%m.%Y')}
</i><i>‚Üí –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {time_str}</i>
        """
    except Exception as e:
        print("BURDAAA 3", e)
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
    try:
        ai_pred_photo = await ai_photo_getter(dialog_manager)
        if ai_pred_photo:
            ai_pred_photo = ai_pred_photo.get("ai_pred_photo")
    except Exception as e:
        print("BURDAAA 4", e)
        ai_pred_photo = None
    return {
        "confirmation_text": text,
        "ai_pred_photo": ai_pred_photo,
    }


async def get_location_confirmation_text(
    dialog_manager: DialogManager, **kwargs
):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏"""
    location_info = dialog_manager.dialog_data.get("location_info", {})
    formatted = location_info.get("formatted", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è")

    # text = f"üìç <b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</b>\n\n\n"
    # text += "–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥?"
    text = f"""
<b><i>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞:</i></b>

<i>‚Üí {formatted}</i>
    """
    try:
        ai_pred_photo = await ai_photo_getter(dialog_manager)
        if ai_pred_photo:
            ai_pred_photo = ai_pred_photo.get("ai_pred_photo")
    except Exception as e:
        print("BURDAAA 4", e)
        ai_pred_photo = None
    return {
        "location_text": text,
        "ai_pred_photo": ai_pred_photo,
    }


async def confirm_data(callback, button, dialog_manager: DialogManager):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await dialog_manager.next(show_mode=ShowMode.EDIT)


async def restart_input(callback, button, dialog_manager: DialogManager):
    """–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∑–∞–Ω–æ–≤–æ"""
    dialog_manager.dialog_data.clear()
    await dialog_manager.start(AstroStates.name, show_mode=ShowMode.EDIT)


async def confirm_location(callback, button, dialog_manager: DialogManager):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    try:
        data = dialog_manager.dialog_data

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        name = data.get("name", "")
        birth_date = datetime.fromisoformat(data.get("birth_date", ""))
        birth_time = data.get("birth_time")
        lat = data.get("lat")
        lng = data.get("lng")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è
        if birth_time:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏, –∞ –Ω–µ –∫–∞–∫ datetime
            from datetime import time

            time_obj = time.fromisoformat(birth_time)
            hour = time_obj.hour
            minute = time_obj.minute
        else:
            hour = 12
            minute = 0

        await set_astro_info(
            user_id=dialog_manager.event.from_user.id,
            name=name,
            birth_year=birth_date.year,
            birth_month=birth_date.month,
            birth_day=birth_date.day,
            birth_hour=hour,
            birth_minute=minute,
            lng=lng,
            lat=lat,
            city=data.get("location_info", {}).get("city"),
            country=data.get("location_info", {}).get("country"),
        )

        config = get_config()
        astro_manager = config.get_astro_manager()

        location_info = data.get("location_info", {})
        subject = astro_manager.get_subject(
            name=name,
            year=birth_date.year,
            month=birth_date.month,
            day=birth_date.day,
            hour=hour,
            minute=minute,
            lng=lng,
            lat=lat,
            city=location_info.get("city"),
            # country=location_info.country,
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SVG
        svg_path = astro_manager.get_svg(
            theme="dark",
            # file_name=f"{name}.svg",
            user_id=dialog_manager.event.from_user.id,
            subject=subject,
        )
        await set_natal_svg(
            user_id=dialog_manager.event.from_user.id,
            natal_svg=svg_path,
        )
        natal_json = astro_manager.get_natal_json(subject=subject)
        await set_natal_json(
            user_id=dialog_manager.event.from_user.id,
            natal_json=natal_json,
        )
        # print("NATAL JSON", natal_json)

        # # –ü—ã—Ç–∞–µ–º—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ PNG
        # print("BURDAAA 5", svg_path)
        # png_path = SVGConverter.convert(
        #     svg_path, png_path=svg_path.with_suffix(".png")
        # )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–∫–Ω–∞
        # if png_path and png_path.exists():
        #     dialog_manager.dialog_data["chart_path"] = str(png_path)
        #     dialog_manager.dialog_data["is_png"] = True
        #     # –£–¥–∞–ª—è–µ–º SVG –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏
        #     svg_path.unlink(missing_ok=True)
        # else:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º SVG
        dialog_manager.dialog_data["natal_json"] = natal_json
        dialog_manager.dialog_data["chart_path"] = str(svg_path)
        dialog_manager.dialog_data["is_png"] = False

        await dialog_manager.switch_to(
            AstroStates.ai_prediction_input, show_mode=ShowMode.EDIT
        )
    except Exception as e:
        print("BURDAAA 4", e)
        await dialog_manager.switch_to(
            AstroStates.ai_prediction_input, show_mode=ShowMode.EDIT
        )


async def send_chart(dialog_manager: DialogManager, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    chart_path = dialog_manager.dialog_data.get("chart_path")
    is_png = dialog_manager.dialog_data.get("is_png", False)

    if chart_path and Path(chart_path).exists():
        bot: Bot = dialog_manager.middleware_data["bot"]
        user_id = dialog_manager.event.from_user.id

        if is_png:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ –µ—Å–ª–∏ —ç—Ç–æ PNG
            await bot.send_photo(
                chat_id=user_id,
                photo=FSInputFile(chart_path),
                caption="üåü –í–∞—à–∞ –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞!",
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –µ—Å–ª–∏ —ç—Ç–æ SVG
            await bot.send_document(
                chat_id=user_id,
                document=FSInputFile(chart_path),
                caption="üåü –í–∞—à–∞ –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞!\n\n"
                "üìé –§–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ.",
            )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        Path(chart_path).unlink(missing_ok=True)

    return {}


async def ai_prediction_loading_getter(
    dialog_manager: DialogManager, **kwargs
):
    """Getter for AI prediction loading screen"""
    loading_text = dialog_manager.dialog_data.get(
        "loading_text", "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–∏—Å–ª–æ–≤—ã–µ –≤–∏–±—Ä–∞—Ü–∏–∏..."
    )
    ai_pred_photo = dialog_manager.dialog_data.get("ai_pred_photo")

    return {
        "loading_text": loading_text,
        "ai_pred_photo": ai_pred_photo,
    }


async def on_submit_query(
    # message: Message, widget, dialog_manager: DialogManager, query: str
    message: Message,
    widget,
    dialog_manager: DialogManager,
    **_,
):
    if dialog_manager.dialog_data.get("error_message"):
        try:
            await dialog_manager.dialog_data["error_message"].delete()
        except Exception as e:
            print("BURDAAA 6", e)
        dialog_manager.dialog_data["error_message"] = None

    if not message.text:
        dialog_manager.dialog_data["error_message"] = await message.answer(
            """<i>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –∑–∞–ø—Ä–æ—Å.</i>"""
        )
        try:
            await message.delete()
        except Exception as e:
            print("BURDAAA 5", e)
        await dialog_manager.update(show_mode=ShowMode.DELETE_AND_SEND)
        return
    """Handle user query submission for AI prediction"""
    user_id = message.from_user.id

    free_predictions = await get_free_predictions_count(user_id)

    dialog_manager.dialog_data["ai_query"] = message.text

    paid_prediction = dialog_manager.dialog_data.get("paid_prediction", False)
    # print("FREE PREDICTIONS", free_predictions)
    if paid_prediction:
        dialog_manager.dialog_data["paid_prediction"] = False
    elif free_predictions <= 0:
        try:
            await message.delete()
        except Exception as e:
            print(e)
            pass
        await dialog_manager.start(
            (
                PaymentStates.payment_choice
                if await get_user_balance(user_id) > 0
                else PaymentStates.payment
            ),
            data={
                # "amount": 10000,
                # "amount": await get_price("personal_brand"),
                "amount": await get_price_for_user(user_id, "ai_prediction"),
                "description": ("ai_prediction"),
                "previous_state": AstroStates.ai_prediction_input,
                "item_oficial_description": "–ü—Ä–æ–≥–Ω–æ–∑ AI-–∞—Å—Ç—Ä–æ–ª–æ–≥",
                # "was_subscribe": True,
            },
            show_mode=ShowMode.DELETE_AND_SEND,
        )
        return

    try:
        # await message.delete()
        pass
    except Exception as e:
        print(e)
    await dialog_manager.switch_to(
        AstroStates.ai_prediction_loading,
        show_mode=ShowMode.EDIT,
    )

    try:
        natal_json = dialog_manager.dialog_data.get("natal_json")
        task = asyncio.create_task(
            generate_numerology_prediction(message.text, natal_json)
        )
        loading_messages = [
            "üåô <i>–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Å—å –Ω–∞ –ø–æ—Ç–æ–∫–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏...</i>",
            "üåô <i>–ü–æ–≥—Ä—É–∂–∞—é—Å—å –≤ —Ç–∞–π–Ω—ã –≤–∞—à–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã...</i>",
            "üåô <i>–°–æ–±–∏—Ä–∞—é –∫–∞—Ä—Ç–∏–Ω—É –≤–∞—à–µ–π —Å—É–¥—å–±—ã —á–µ—Ä–µ–∑ –∑–≤—ë–∑–¥—ã...</i>",
            "üåô <i>–†–∞—Å–∫—Ä—ã–≤–∞—é –ø–æ—Å–ª–∞–Ω–∏—è, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ –ø–ª–∞–Ω–µ—Ç–∞—Ö...</i>",
            "üåô <i>–ò—Å—Å–ª–µ–¥—É—é –≥–∞—Ä–º–æ–Ω–∏—é –Ω–µ–±–µ—Å–Ω—ã—Ö —Ç–µ–ª –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø–µ...</i>",
            "üåô <i>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–ª–∏—è–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –Ω–∞ –≤–∞—à –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å...</i>",
            "üåô <i>–ò–∑—É—á–∞—é –∞—Å–ø–µ–∫—Ç—ã –º–µ–∂–¥—É –ø–ª–∞–Ω–µ—Ç–∞–º–∏ –≤ –º–æ–º–µ–Ω—Ç —Ä–æ–∂–¥–µ–Ω–∏—è...</i>",
            "üåô <i>–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é —Å–∏–º–≤–æ–ª—ã –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–æ–º–æ–≤...</i>",
            "üåô <i>–°—á–∏—Ç—ã–≤–∞—é —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ç–æ–∫–∏ —Å–æ–∑–≤–µ–∑–¥–∏–π...</i>",
            "üåô <i>–§–æ—Ä–º–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑...</i>",
        ]

        for i in range(len(loading_messages)):
            dialog_manager.dialog_data["loading_text"] = loading_messages[i]
            await dialog_manager.update({"loading_text": loading_messages[i]})
            if (
                i < len(loading_messages) - 1
            ):  # Don't delay after the last message
                await asyncio.sleep(1.5)

        await dialog_manager.event.bot.send_chat_action(
            user_id, "find_location"
        )
        # try:
        #     await dialog_manager.event.bot.send_chat_action(user_id, "playing")
        #     await asyncio.sleep(2)
        # except Exception as er:
        #     print(er)
        #     pass
        # try:
        #     await dialog_manager.event.bot.send_chat_action(user_id, "typing")
        #     await asyncio.sleep(1.5)
        # except Exception:
        #     pass
        # try:
        #     await dialog_manager.event.bot.send_chat_action(
        #         user_id, "choose_sticker"
        #     )
        #     await asyncio.sleep(1.5)
        # except Exception:
        #     pass
        try:
            prediction = await task
        except Exception as e:
            print(f"\n\nError generating numerology prediction: {e}\n\n")
            prediction = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ!"

        dialog_manager.dialog_data["ai_prediction"] = prediction

        try:
            await decrease_free_predictions_count(user_id)
        except Exception as e:
            print(f"\n\nError decreasing free predictions count: {e}\n\n")

        await dialog_manager.switch_to(
            AstroStates.ai_prediction_result,
            show_mode=ShowMode.DELETE_AND_SEND,
        )

    except Exception as e:

        print(f"\n\nError generating numerology prediction: {e}\n\n")

        error_message = """<i><u>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</u> –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.</i> 

<b><i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ!</i></b>"""
        dialog_manager.dialog_data["ai_prediction"] = error_message

        await dialog_manager.switch_to(
            AstroStates.ai_prediction_result,
            show_mode=ShowMode.DELETE_AND_SEND,
        )


async def ai_prediction_getter(dialog_manager: DialogManager, **kwargs):
    """Getter for AI prediction main screen"""
    user_id = dialog_manager.event.from_user.id

    free_predictions_count = await get_free_predictions_count(user_id)

    prediction_price_str = await format_price(user_id, "ai_prediction")
    return {
        "free_predictions_count": free_predictions_count,
        "prediction_price_str": prediction_price_str,
    }


async def restart_location(callback, button, dialog_manager: DialogManager):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–≤–æ–¥—É –ª–æ–∫–∞—Ü–∏–∏"""
    await dialog_manager.switch_to(AstroStates.natal_place)


async def next_page(callback, button, dialog_manager: DialogManager):
    """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    current_page = dialog_manager.dialog_data.get("current_page", 0)
    dialog_manager.dialog_data["current_page"] = current_page + 1
    await dialog_manager.update({})


async def prev_page(callback, button, dialog_manager: DialogManager):
    """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    current_page = dialog_manager.dialog_data.get("current_page", 0)
    dialog_manager.dialog_data["current_page"] = current_page - 1
    await dialog_manager.update({})


async def ai_prediction_result_getter(dialog_manager: DialogManager, **kwargs):
    """Getter for AI prediction result screen"""
    try:
        prediction = dialog_manager.dialog_data.get("ai_prediction", "")
        # print("PREDICTION", prediction)
        current_page = dialog_manager.dialog_data.get("current_page", 0)

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –∫–Ω–æ–ø–æ–∫)
        MAX_MESSAGE_LENGTH = 4000

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º HTML
        pages = split_text_simple(prediction, MAX_MESSAGE_LENGTH)

        total_pages = len(pages)
        # print("CURRENT PAGE", current_page)
        # print("TOTAL PAGES", total_pages)

        if current_page >= total_pages:
            current_page = total_pages - 1
            dialog_manager.dialog_data["current_page"] = current_page
        elif current_page < 0:
            current_page = 0
            dialog_manager.dialog_data["current_page"] = current_page

        has_next = current_page < total_pages - 1
        has_prev = current_page > 0

        current_page_text = (
            pages[current_page] if 0 <= current_page < len(pages) else ""
        )

        return {
            "ai_prediction": current_page_text,
            "current_page": current_page,
            "total_pages": total_pages,
            "show_pagination": total_pages > 1,
            "has_next": has_next,
            "has_prev": has_prev,
            # "page_info": f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}",
        }
    except Exception as e:
        print(f"Error in ai_prediction_result_getter: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        prediction = dialog_manager.dialog_data.get(
            "ai_prediction", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞."
        )
        return {
            "ai_prediction": prediction,
            "current_page": 0,
            "total_pages": 1,
            "show_pagination": False,
            "has_next": False,
            "has_prev": False,
        }


async def back_to_main(callback, button, dialog_manager: DialogManager):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await dialog_manager.start(
        YogaClubStates.main, show_mode=ShowMode.DELETE_AND_SEND
    )


async def back_to_main_save(callback, button, dialog_manager: DialogManager):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    prediction = dialog_manager.dialog_data.get("ai_prediction", "")
    # print("PREDICTION", prediction)
    current_page = 0

    MAX_MESSAGE_LENGTH = 4000

    pages = split_text_simple(prediction, MAX_MESSAGE_LENGTH)

    for page in pages:
        await dialog_manager.event.bot.send_message(
            dialog_manager.event.from_user.id,
            page,
            parse_mode="HTML",
        )

    await dialog_manager.start(
        YogaClubStates.main, show_mode=ShowMode.DELETE_AND_SEND
    )


async def ai_photo_getter(dialog_manager: DialogManager, **kwargs):
    """Getter for AI photo"""
    if dialog_manager.dialog_data.get("ai_pred_photo") is None:
        ai_pred_photo = await get_pay_photo_attachment(
            dialog_manager.event.bot, "src/misk/navigation/ai_predict.png"
        )
        dialog_manager.dialog_data["ai_pred_photo"] = ai_pred_photo
    else:
        ai_pred_photo = dialog_manager.dialog_data.get("ai_pred_photo")
    name = dialog_manager.dialog_data.get("name", "")
    return {
        "ai_pred_photo": dialog_manager.dialog_data.get("ai_pred_photo", None),
        "name": name,
    }


async def ai_question_getter(dialog_manager: DialogManager, **kwargs):
    """Getter for AI question"""
    try:
        name = dialog_manager.dialog_data.get("name", "")
        not_first_time = dialog_manager.dialog_data.get(
            "not_first_time", False
        )
        prediction_price_str = await format_price(
            dialog_manager.event.from_user.id, "ai_prediction"
        )
        free_predictions_count = await get_free_predictions_count(
            dialog_manager.event.from_user.id
        )
        if dialog_manager.start_data:
            not_first_time = dialog_manager.start_data.get(
                "not_first_time", False
            )
            name = dialog_manager.start_data.get("name", name)
        try:
            ai_pred_photo = await ai_photo_getter(dialog_manager)
            if ai_pred_photo:
                ai_pred_photo = ai_pred_photo.get("ai_pred_photo")
        except Exception as e:
            print("BURDAAA 4", e)
            ai_pred_photo = None
        return {
            "first_time": not not_first_time,
            "name": name,
            "not_first_time": not_first_time,
            "ai_pred_photo": ai_pred_photo,
            "price": prediction_price_str,
            "free_predictions_count": free_predictions_count,
            "have_free": free_predictions_count > 0,
            "dont_have_free": (
                free_predictions_count == 0
                or free_predictions_count is None
                or free_predictions_count < 0
            ),
        }
    except Exception as e:
        print(f"Error in ai_question_getter: {e}")
        return {
            "first_time": not not_first_time,
            "name": name,
            "not_first_time": not_first_time,
        }


# –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∫–æ–¥–∞

astro_dialog = Dialog(
    # –û–∫–Ω–æ 1: –í–≤–æ–¥ –∏–º–µ–Ω–∏
    # Window(
    #     DynamicMedia("ai_pred_photo", when="ai_pred_photo"),
    #     Const("–¢–ï–ö–°–¢"),
    #     SwitchTo(
    #         Format("–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ"),
    #         id="switch_to_input",
    #         state=AstroStates.name,
    #     ),
    #     SwitchTo(
    #         Format("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"),
    #         id="switch_to_question",
    #         state=AstroStates.ai_prediction_input,
    #     ),
    #     Button(
    #         Const("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    #         id="back_to_main",
    #         on_click=back_to_main,
    #     ),
    #     state=AstroStates.main,
    #     getter=ai_photo_getter,
    # ),
    Window(
        DynamicMedia("ai_pred_photo", when="ai_pred_photo"),
        Const(
            """
<i><b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª AI-–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ ü™ê</b>

–Ø ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∞—Å—Ç—Ä–æ–ª–æ–≥–∞ –ò–Ω–Ω—ã –ë—É–ª–≥–∞—Ä–æ–≤–æ–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏, –∏ —è –±—ã—Å—Ç—Ä–æ –ø–æ—Å—Ç—Ä–æ—é –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É –∫–∞—Ä—Ç—É, </i><i><b>—á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å.</b>

–ß—Ç–æ–±—ã –≤—ã —É–±–µ–¥–∏–ª–∏—Å—å –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞, </i><i><b>–º—ã –¥–∞—Ä–∏–º –≤–∞–º –æ–¥–∏–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑,</b> –∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ </i><i><b>‚Äî 799 —Ä—É–±–ª–µ–π. </b>

[ –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ –ò–Ω–Ω–µ. ]

</i><i><b>–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?</b> –î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ ü™Ñ

‚Üí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è:</i>
              """
        ),
        TextInput(
            id="name_input",
            on_success=process_name,
        ),
        state=AstroStates.name,
        getter=ai_photo_getter,
    ),
    # –û–∫–Ω–æ 2: –í—ã–±–æ—Ä –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    Window(
        DynamicMedia("ai_pred_photo", when="ai_pred_photo"),
        Format(
            """<b><i>–û—Ç–ª–∏—á–Ω–æ, {name}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º</i></b>‚ö°Ô∏è

<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ –º–æ—ë–º –≤–∏–¥–∂–µ—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è!</i>"""
        ),
        DatePicker(
            id="birth_date_picker",
            on_click=on_date_selected,
        ),
        state=AstroStates.natal_date,
        getter=ai_photo_getter,
    ),
    # –û–∫–Ω–æ 3: –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
    Window(
        DynamicMedia("ai_pred_photo", when="ai_pred_photo"),
        Const(
            """
<b><i>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è:</i></b>

<i>‚Üí –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–º—É –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.</i>
              """
        ),
        # Const("<i>‚Üí –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–º—É –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.</i>"),
        TimePicker(
            id="birth_time_picker",
            on_click=on_time_selected,
            allow_unknown=True,
        ),
        state=AstroStates.natal_time,
        getter=ai_photo_getter,
    ),
    # –û–∫–Ω–æ 4: –í–≤–æ–¥ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
    Window(
        DynamicMedia("ai_pred_photo", when="ai_pred_photo"),
        Format(
            """
<b><i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ä–æ–¥–∏–ª–∏—Å—å, –ª–∏–±–æ, –¥–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:</i></b>

<i>‚Üí –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∏–º–≤–æ–ª ¬´üìé¬ª...
‚Üí –í—ã–±–µ—Ä–∏—Ç–µ ¬´–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è¬ª...
‚Üí –ù–∞–∂–º–∏—Ç–µ ¬´üîç¬ª –∏ –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –∫–∞—Ä—Ç–µ...</i>
<i>‚Üí –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç—É</i>.
            """
        ),
        MessageInput(
            func=process_location,
            content_types=[ContentType.LOCATION, ContentType.TEXT],
        ),
        state=AstroStates.natal_place,
        getter=ai_photo_getter,
    ),
    # –û–∫–Ω–æ 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    Window(
        DynamicMedia("ai_pred_photo", when="ai_pred_photo"),
        Format("{confirmation_text}"),
        Row(
            Button(
                Const("–î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ"),
                id="confirm_data",
                on_click=confirm_data,
            ),
            Button(
                Const("–ò–∑–º–µ–Ω–∏—Ç—å"),
                id="restart_input",
                on_click=restart_input,
            ),
        ),
        state=AstroStates.confirm_data,
        getter=get_confirmation_text,
    ),
    # –û–∫–Ω–æ 6: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
    Window(
        DynamicMedia("ai_pred_photo", when="ai_pred_photo"),
        Format("{location_text}"),
        Row(
            Button(
                Const("–î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ"),
                id="confirm_location",
                on_click=confirm_location,
            ),
            Button(
                Const("–ò–∑–º–µ–Ω–∏—Ç—å"),
                id="restart_location",
                on_click=restart_location,
            ),
        ),
        state=AstroStates.confirm_location,
        getter=get_location_confirmation_text,
    ),
    Window(
        DynamicMedia("ai_pred_photo", when="ai_pred_photo"),
        Format(
            """
<i>–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–∞–º–∏ ü™ê</i>

<i>[</i> <i>{name}, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–ø—Ä–æ—Å </i><i><b>‚Äî –∏ –º—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–∂–µ–º –≤–∞–º,</b> –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã.</i> <i>]</i>

<i>–ï—Å–ª–∏ –ø–æ–∫–∞ —Ç—Ä—É–¥–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è, </i><b><i>–ø—Ä–∏–≤–µ–¥—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤:</i></b>

<i><b><b><i>‚Ä¢</i></b></b> –ö–æ–≥–¥–∞ —è –≤—Å—Ç—Ä–µ—á—É —Å–≤–æ—é –ª—é–±–æ–≤—å?
</i><i><b><b><i>‚Ä¢</i></b></b> –ö–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç –ø–µ—Ä–∏–æ–¥ —Ä–æ—Å—Ç–∞?
</i><i><b><b><i>‚Ä¢</i></b></b> –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –∫–∞—Ä—å–µ—Ä—É?
</i><i><b><b><i>‚Ä¢</i></b></b> –ö–æ–≥–¥–∞ –≤–æ—Ü–∞—Ä–∏—Ç—Å—è –≥–∞—Ä–º–æ–Ω–∏—è –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö?</i>
            """,
            when=F["first_time"],
        ),
        Format(
            """<i><b>{name}, —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤–Ω–æ–≤—å –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ</b> üåô

–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?

</i><b><i>–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤:</i></b>
<i>
<b><i>‚Ä¢</i></b> –í –∫–∞–∫–æ–º –≥–æ–¥—É —è –≤—ã–π–¥—É –∑–∞–º—É–∂?
<b><i>‚Ä¢</i></b> –ö–∞–∫–æ–≤–æ –º–æ—ë –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ?
<b><i>‚Ä¢</i></b> –°–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –±—É–¥–µ—Ç –¥–µ—Ç–µ–π?</i>
""",
            when=F["not_first_time"],
        ),
        Format(
            """<i>[ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî {price} —Ä—É–±–ª–µ–π. ]</i>
<i>
–ñ–¥–µ–º –≤–∞—à –≤–æ–ø—Ä–æ—Å </i><b><i>‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ:</i></b>
              """,
            when=F["dont_have_free"] & F["not_first_time"],
        ),
        # when=F,
        Format(
            """<i>[ –í–∞—à –±–∞–ª–∞–Ω—Å –∑–∞–ø—Ä–æ—Å–æ–≤: {free_predictions_count} ]</i>
<i>
–ñ–¥–µ–º –≤–∞—à –≤–æ–ø—Ä–æ—Å </i><b><i>‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ:</i></b>
              """,
            when=F["have_free"],
        ),
        # when=F,
        MessageInput(
            # id="query_input",
            func=on_submit_query,
            # content_types=[ContentType.TEXT],
        ),
        # Start(
        #     Format("<< –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        #     id="back_to_ai_main",
        #     state=YogaClubStates.main,
        #     show_mode=ShowMode.DELETE_AND_SEND,
        # ),
        state=AstroStates.ai_prediction_input,
        # getter=ai_prediction_getter,
        # getter=ai_photo_getter,
        getter=ai_question_getter,
    ),
    Window(
        # DynamicMedia("ai_pred_photo", when="ai_pred_photo"),
        Format("{loading_text}"),
        state=AstroStates.ai_prediction_loading,
        getter=ai_prediction_loading_getter,
    ),
    Window(
        Format("{ai_prediction}"),
        Row(
            Button(
                Const("<< –ù–∞–∑–∞–¥"),
                id="prev_page",
                on_click=prev_page,
                when=F["has_prev"],
            ),
            Button(
                Const("–í–ø–µ—Ä–µ–¥ >>"),
                id="next_page",
                on_click=next_page,
                when=F["has_next"],
            ),
        ),
        Button(
            # Const("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            Const("[ –ü—Ä–∏–Ω–∏–º–∞—é –∏ –±–ª–∞–≥–æ–¥–∞—Ä—é ]"),
            id="back_to_main_2",
            on_click=back_to_main_save,
        ),
        state=AstroStates.ai_prediction_result,
        getter=ai_prediction_result_getter,
    ),
)

# if len(prediction) <= MAX_MESSAGE_LENGTH:
#     # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
#     return {
#         "ai_prediction": prediction,
#         "current_page": current_page,
#         "total_pages": 1,
#         "show_pagination": False,
#         "has_next": False,
#         "has_prev": False,
#     }

# # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∞–±–∑–∞—Ü–∞–º
# paragraphs = prediction.split("\n\n")
# pages = []
# current_page_text = ""

# for paragraph in paragraphs:
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –∞–±–∑–∞—Ü –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
#     test_text = (
#         current_page_text
#         + ("\n\n" if current_page_text else "")
#         + paragraph
#     )

#     if len(test_text) <= MAX_MESSAGE_LENGTH:
#         current_page_text = test_text
#     else:
#         # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø—É—Å—Ç–∞—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë
#         if current_page_text:
#             pages.append(current_page_text)
#             current_page_text = paragraph
#         else:
#             # –ï—Å–ª–∏ –∞–±–∑–∞—Ü —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–∞–∂–µ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã,
#             # —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
#             sentences = paragraph.split(". ")
#             for i, sentence in enumerate(sentences):
#                 if i < len(sentences) - 1:
#                     sentence += ". "

#                 test_text = (
#                     current_page_text
#                     + ("\n\n" if current_page_text else "")
#                     + sentence
#                 )

#                 if len(test_text) <= MAX_MESSAGE_LENGTH:
#                     current_page_text = test_text
#                 else:
#                     if current_page_text:
#                         pages.append(current_page_text)
#                         current_page_text = sentence
#                     else:
#                         # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
#                         pages.append(sentence)
#                         current_page_text = ""

# if current_page_text:
#     pages.append(current_page_text)

# if not pages:
#     pages = [prediction]
