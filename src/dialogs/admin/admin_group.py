from aiogram.types import CallbackQuery, Message
from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Button, ScrollingGroup, Select
from aiogram_dialog.widgets.text import Const, Format

# from aiogram_dialog.widgets.scrolling import ScrollingGroup
from db.models.user import (
    get_all_user_ids,
    get_users_bought,
    get_users_not_bought,
    get_users_not_bought_but,
    get_users_not_entered,
    get_users_not_today,
    get_users_today,
)
from db.special_function.ab_group_manager import (
    get_group_statistics,
    reset_all_groups,
    split_users_into_groups,
)
from dialogs.states import AdminStates


async def get_groups_info(**kwargs):
    try:
        stats = await get_group_statistics()
        groups_text = "\n\n".join(
            f"üìä {name}:\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {info['count']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {info['description'] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
            for name, info in stats.items()
        )
        return {"groups_info": groups_text or "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø"}
    except Exception as e:
        print(e)
        return {"groups_info": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø"}


async def process_split_name(
    message: Message, dialog: Dialog, manager: DialogManager
):
    manager.dialog_data["split_name"] = message.text
    # await message.answer(
    #     "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    # )
    await manager.switch_to(AdminStates.AB_GROUPS_DESCRIPTION)


async def process_split_description(
    message: Message, dialog: Dialog, manager: DialogManager
):
    description = None if message.text == "-" else message.text
    manager.dialog_data["description"] = description
    # await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è:")
    await manager.switch_to(AdminStates.AB_GROUPS_SPLIT)


async def process_split_number(
    message: Message, dialog: Dialog, manager: DialogManager
):
    try:
        num_groups = int(message.text)
        if num_groups < 2:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 1")
            return

        target_users = manager.dialog_data.get("target_users", [])
        split_name = manager.dialog_data.get("split_name", "–ù–æ–≤–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ")
        description = manager.dialog_data.get("description")

        result = await split_users_into_groups(
            target_users, num_groups, split_name, description
        )

        response = "–†–∞–∑–±–∏–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:\n" + "\n".join(
            f"–ì—Ä—É–ø–ø–∞ {group}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            for group, count in result.items()
        )
        await message.answer(response)

    except ValueError:
        await message.answer("<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ</i>")
    except Exception as e:
        print(e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    await manager.switch_to(AdminStates.AB_GROUPS_MAIN)


async def on_split_all_users(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    users = await get_all_user_ids()
    manager.dialog_data["target_users"] = users
    await manager.switch_to(AdminStates.AB_GROUPS_NAME)


async def on_split_not_bought(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    users = await get_users_not_bought()
    manager.dialog_data["target_users"] = users
    await manager.switch_to(AdminStates.AB_GROUPS_NAME)


async def on_split_bought(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    users = await get_users_bought()
    manager.dialog_data["target_users"] = users
    await manager.switch_to(AdminStates.AB_GROUPS_NAME)


async def on_split_not_bought_but(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    users = await get_users_not_bought_but()
    manager.dialog_data["target_users"] = users
    await manager.switch_to(AdminStates.AB_GROUPS_NAME)


async def on_split_today(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    users = await get_users_today()
    manager.dialog_data["target_users"] = users
    await manager.switch_to(AdminStates.AB_GROUPS_NAME)


async def on_split_not_today(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    users = await get_users_not_today()
    manager.dialog_data["target_users"] = users
    await manager.switch_to(AdminStates.AB_GROUPS_NAME)


async def on_split_not_entered(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    users = await get_users_not_entered()
    manager.dialog_data["target_users"] = users
    await manager.switch_to(AdminStates.AB_GROUPS_NAME)


async def on_reset_groups(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    try:
        result = await reset_all_groups()
        await c.message.answer(
            f"–°–±—Ä–æ—à–µ–Ω—ã –≥—Ä—É–ø–ø—ã —É {result['users_reset']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            f"–£–¥–∞–ª–µ–Ω–æ {result['groups_deleted']} –∑–∞–ø–∏—Å–µ–π –æ –≥—Ä—É–ø–ø–∞—Ö"
        )
        await manager.switch_to(AdminStates.AB_GROUPS_MAIN)
    except Exception as e:
        print(e)
        await c.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –≥—Ä—É–ø–ø")


async def on_split_by_buttons(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–†–∞–∑–±–∏—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º'. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏.
    """
    await manager.switch_to(AdminStates.AB_GROUPS_BUTTONS)


async def yes_more(c: CallbackQuery, button: Button, manager: DialogManager):
    manager.dialog_data["and_more"] = True
    await proc_all_about_buttons(c, button, manager, True)
    # await manager.switch_to(AdminStates.AB_GROUPS_NAME)


async def no_more(c: CallbackQuery, button: Button, manager: DialogManager):
    manager.dialog_data["and_more"] = False
    await proc_all_about_buttons(c, button, manager, False)


async def proc_all_about_buttons(
    c: CallbackQuery, button: Button, manager: DialogManager, and_more: bool
):
    try:
        taps = manager.dialog_data.get("taps")
        button_name = manager.dialog_data.get("button_name")
        if not button_name:
            await c.message.answer(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return

        from db.models.old_workflow.person_button import (
            get_users_by_button_taps,
        )

        target_users = await get_users_by_button_taps(
            button_name, taps, and_more
        )

        if not target_users:
            await c.message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º."
            )
        manager.dialog_data["target_users"] = target_users
        await manager.switch_to(AdminStates.AB_GROUPS_NAME)
        # await manager.switch_to(AdminStates.AB_GROUPS_ANDMORE)

    except ValueError:
        await c.message.answer("<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.</i>")
    except Exception as e:
        print(e)
        await c.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–Ω–æ–ø–∫–µ.")
        await manager.switch_to(AdminStates.AB_GROUPS_BUTTONS)


ids = {
    "–ê—Ä–∫–∞–Ω": "arcan",
    "–ô–æ–≥–∞ –∫–ª—É–±": "yoga",
    "–õ–∏–ª–∞ | –ö–æ–¥ —Å—É–¥—å–±—ã –æ–Ω–ª–∞–π–Ω": "lila",
    "–ú–∞–∫ –∫–∞—Ä—Ç—ã": "mac",
    "–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞ –ù–æ–≤–æ–π –õ–∏–ª—ã": "train",
    "–ü–æ–¥–∞—Ä–∫–∏": "gift",
    "–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã": "usefull",
    "–ü—É—Ç—å –∫ —Ü–µ–ª–∏": "way",
    "–° —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º": "with_help",
    "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ": "alone",
    "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã": "cert",
    "–ß–∞–∫—Ä–æ–∞–Ω–∞–ª–∏–∑": "chakr",
}

back_ids = {
    "arcan": "–ê—Ä–∫–∞–Ω",
    "yoga": "–ô–æ–≥–∞ –∫–ª—É–±",
    "lila": "–õ–∏–ª–∞ | –ö–æ–¥ —Å—É–¥—å–±—ã –æ–Ω–ª–∞–π–Ω",
    "mac": "–ú–∞–∫ –∫–∞—Ä—Ç—ã",
    "train": "–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞ –ù–æ–≤–æ–π –õ–∏–ª—ã",
    "gift": "–ü–æ–¥–∞—Ä–∫–∏",
    "usefull": "–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
    "way": "–ü—É—Ç—å –∫ —Ü–µ–ª–∏",
    "with_help": "–° —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º",
    "alone": "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ",
    "cert": "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã",
    "chakr": "–ß–∞–∫—Ä–æ–∞–Ω–∞–ª–∏–∑",
}


async def get_buttons_info(**kwargs) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∏–∑ PersonButton –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫.
    """
    # print("get_buttons_info")
    try:
        from sqlalchemy import select

        from db.db import AsyncSessionLocal
        from db.models.old_workflow.person_button import PersonButton

        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(PersonButton.button_name).group_by(
                    PersonButton.button_name
                )
            )
            buttons = [row[0] for row in result]

            short_buttons = []
            for button in buttons:
                if len(button) > 10:
                    short_button = {
                        "name": button,
                        "id": ids.get(button) or button,
                        "short_name": button[:15].replace("|", ""),
                    }
                else:
                    short_button = {
                        "name": button,
                        "id": ids.get(button) or button,
                        "short_name": button.replace("|", ""),
                    }
                short_buttons.append(short_button)
        # print("buttons", buttons)
        # print("short_buttons", short_buttons)
        return {"buttons": buttons, "short_buttons": short_buttons}
    except Exception as e:
        print(e)
        return {"buttons": [], "short_buttons": []}


async def process_button_name(
    message: Message, dialog: Dialog, manager: DialogManager
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ dialog_data –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–∂–∞—Ç–∏–π.
    """
    manager.dialog_data["button_name"] = message.text.strip()
    await manager.switch_to(AdminStates.AB_GROUPS_BUTTONS_COUNT)


async def process_button_count(
    message: Message, dialog: Dialog, manager: DialogManager
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–∂–∞—Ç–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –ë–î —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–∞–∂–∞—Ç–∏–π, –∑–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö
    –≤ dialog_data['target_users'] –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ A/B –≥—Ä—É–ø–ø—ã.
    """

    taps = int(message.text)
    manager.dialog_data["taps"] = taps

    await manager.switch_to(AdminStates.AB_GROUPS_ANDMORE)


async def on_select_button(
    c: CallbackQuery, widget: Button, manager: DialogManager, item_data: str
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ dialog_data –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –¥–∏–∞–ª–æ–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–∂–∞—Ç–∏–π.
    """
    manager.dialog_data["button_name"] = back_ids.get(item_data) or item_data
    await manager.switch_to(AdminStates.AB_GROUPS_BUTTONS_COUNT)


ab_groups_windows = [
    Window(
        Const("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ A/B –≥—Ä—É–ø–ø–∞–º–∏"),
        Format("{groups_info}"),
        Button(
            Const("–†–∞–∑–±–∏—Ç—å –≤—Å–µ—Ö"),
            id="split_all",
            on_click=on_split_all_users,
        ),
        Button(
            Const("–†–∞–∑–±–∏—Ç—å –ø–æ –∫–Ω–æ–ø–∫–∞–º"),
            id="split_by_buttons",
            on_click=on_split_by_buttons,
        ),
        Button(
            Const("–†–∞–∑–±–∏—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–∏–≤—à–∏—Ö"),
            id="split_not_bought",
            on_click=on_split_not_bought,
        ),
        Button(
            Const("–†–∞–∑–±–∏—Ç—å —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –∫—É–ø–∏–≤—à–∏—Ö"),
            id="split_bought",
            on_click=on_split_bought,
        ),
        Button(
            Const("–†–∞–∑–±–∏—Ç—å –¥–æ—à–µ–ª –¥–æ –ø–æ–∫—É–ø–∫–∏, –Ω–æ –Ω–µ –∫—É–ø–∏–ª"),
            id="split_not_bought_but",
            on_click=on_split_not_bought_but,
        ),
        Button(
            Const("–†–∞–∑–±–∏—Ç—å –¥–æ–±–∞–≤–∏–≤—à–∏—Ö—Å—è —Å–µ–≥–æ–¥–Ω—è"),
            id="split_today",
            on_click=on_split_today,
        ),
        Button(
            Const("–†–∞–∑–±–∏—Ç—å –¥–æ–±–∞–≤–∏–≤—à–∏—Ö—Å—è –Ω–µ —Å–µ–≥–æ–¥–Ω—è"),
            id="split_not_today",
            on_click=on_split_not_today,
        ),
        Button(
            Const("–†–∞–∑–±–∏—Ç—å –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –≤—Ö–æ–¥"),
            id="split_not_entered",
            on_click=on_split_not_entered,
        ),
        Button(
            Const("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã"),
            id="reset_groups",
            on_click=on_reset_groups,
        ),
        Button(
            Const("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"),
            id="back",
            on_click=lambda c, b, m: m.switch_to(AdminStates.MAIN),
        ),
        state=AdminStates.AB_GROUPS_MAIN,
        getter=get_groups_info,
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è:"),
        ScrollingGroup(
            Select(
                Format("{item[short_name]}"),
                # Format("XXXX"),
                item_id_getter=lambda x: x["id"],
                id="select_button_1",
                # items="buttons",
                items="short_buttons",
                on_click=on_select_button,
                # width=2,  # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
            ),
            width=1,
            height=5,
            id="select_scroll_group_id",
        ),
        Button(
            Const("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"),
            id="back",
            on_click=lambda c, b, m: m.switch_to(AdminStates.AB_GROUPS_MAIN),
        ),
        state=AdminStates.AB_GROUPS_BUTTONS,
        getter=get_buttons_info,
    ),
    Window(
        Const("<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:</i>"),
        MessageInput(process_button_count),
        Button(
            Const("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"),
            id="back",
            on_click=lambda c, b, m: m.switch_to(
                AdminStates.AB_GROUPS_BUTTONS
            ),
        ),
        state=AdminStates.AB_GROUPS_BUTTONS_COUNT,
    ),
    Window(
        Const("–ò –±–æ–ª—å—à–µ?"),
        # MessageInput(process_button_count),
        Button(
            Const("–î–∞"),
            id="yes_more",
            on_click=yes_more,
        ),
        Button(
            Const("–ù–µ—Ç"),
            id="no_more",
            on_click=no_more,
        ),
        Button(
            Const("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"),
            id="back",
            on_click=lambda c, b, m: m.switch_to(
                AdminStates.AB_GROUPS_BUTTONS_COUNT
            ),
        ),
        state=AdminStates.AB_GROUPS_ANDMORE,
    ),
    Window(
        Const("<i>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è:</i>"),
        MessageInput(process_split_name),
        Button(
            Const("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"),
            id="back",
            on_click=lambda c, b, m: m.switch_to(AdminStates.AB_GROUPS_MAIN),
        ),
        state=AdminStates.AB_GROUPS_NAME,
    ),
    Window(
        Const(
            "<i>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):</i>"
        ),
        MessageInput(process_split_description),
        Button(
            Const("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"),
            id="back",
            on_click=lambda c, b, m: m.switch_to(AdminStates.AB_GROUPS_NAME),
        ),
        state=AdminStates.AB_GROUPS_DESCRIPTION,
    ),
    Window(
        Const("<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è:</i>"),
        MessageInput(process_split_number),
        Button(
            Const("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"),
            id="back",
            on_click=lambda c, b, m: m.switch_to(
                AdminStates.AB_GROUPS_DESCRIPTION
            ),
        ),
        state=AdminStates.AB_GROUPS_SPLIT,
    ),
]
