import datetime
from typing import Any

from aiogram.types import (
    CallbackQuery,
    FSInputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from aiogram_dialog import Dialog, DialogManager, ShowMode, StartMode, Window
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Button, Row, Select
from aiogram_dialog.widgets.text import Const, Format

from config.config import ADMIN_IDS
from db.models.old_workflow.big_mes import get_pay_photo_attachment
from db.models.old_workflow.useful_material import (
    add_useful_material,
    delete_useful_material,
    get_useful_material,
    get_useful_materials,
)
from db.models.user import get_all_user_ids
from dialogs.admin.admin_ai_promo import ai_promo_windows
from dialogs.admin.admin_broadcast_easy import broadcast_easy_windows
from dialogs.admin.admin_certificates import admin_certificates_windows
from dialogs.admin.admin_links import links_windows
from dialogs.admin.admin_payment_link import payment_links_windows
from dialogs.admin.admin_prices import prices_windows
from dialogs.states import AdminStates, StatisticStates, YogaClubStates


def generate_unique_column_name():
    return f"broadcast_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}"


async def switch_to_prices(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.switch_to(AdminStates.PRICES)


async def admin_access_middleware(event, data):
    user_id = event.from_user.id
    return user_id in ADMIN_IDS


async def get_materials_list(dialog_manager: DialogManager, **_):
    materials = await get_useful_materials()
    materials_photo = await get_pay_photo_attachment(
        dialog_manager.event.bot, "misk/navigation/usefull_admin.png"
    )
    return {
        "materials": materials,
        "materials_list": "\n".join(
            [f"<b><i>‚Ä¢</i></b> ¬´{m.name}¬ª" for m in materials]
        ),
        "materials_photo": materials_photo,
    }


async def admin_handler(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.start(AdminStates.MAIN)


async def process_material_message(
    message: Message, dialog: Dialog, manager: DialogManager
):
    manager.dialog_data["message_id"] = message.message_id
    manager.dialog_data["chat_id"] = message.chat.id
    await message.delete()
    await manager.switch_to(
        AdminStates.ADD_MATERIAL_NAME, show_mode=ShowMode.EDIT
    )


async def process_material_name(
    message: Message, dialog: Dialog, manager: DialogManager
):
    manager.dialog_data["is_free"] = True
    manager.dialog_data["material_name"] = message.text
    await message.delete()
    await manager.switch_to(
        AdminStates.NOTIFICATION_CHOICE, show_mode=ShowMode.EDIT
    )


async def set_free_material(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    manager.dialog_data["is_free"] = True
    await manager.switch_to(AdminStates.NOTIFICATION_CHOICE)


async def set_paid_material(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    manager.dialog_data["is_free"] = False
    await manager.switch_to(AdminStates.NOTIFICATION_CHOICE)


async def on_material_selected(
    c: CallbackQuery, widget: Any, manager: DialogManager, item_id: str
):
    material_id = int(item_id)
    material = await get_useful_material(material_id)
    if material:
        await delete_useful_material(material_id)
        await c.message.answer(
            f"<i>–ú–∞—Ç–µ—Ä–∏–∞–ª ¬´{material.name}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.</i>"
        )
    await manager.switch_to(
        AdminStates.MATERIALS, show_mode=ShowMode.DELETE_AND_SEND
    )


async def switch_to_broadcast(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.switch_to(AdminStates.BROADCAST, show_mode=ShowMode.EDIT)


async def switch_to_materials(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.switch_to(AdminStates.MATERIALS, show_mode=ShowMode.EDIT)


async def switch_to_main(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.switch_to(AdminStates.MAIN, show_mode=ShowMode.EDIT)


async def switch_to_add_material(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.switch_to(AdminStates.ADD_MATERIAL, show_mode=ShowMode.EDIT)


async def switch_to_delete_material(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.switch_to(
        AdminStates.DELETE_MATERIAL, show_mode=ShowMode.EDIT
    )


async def notify_users_handler(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    data = manager.dialog_data
    material = await add_useful_material(
        name=data["material_name"],
        message_id=data["message_id"],
        chat_id=data["chat_id"],
        created_by=c.from_user.id,
        is_free=data["is_free"],
    )

    user_ids = await get_all_user_ids()
    success_count = 0
    fail_count = 0

    for user_id in user_ids:
        try:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="> –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã <",
                            callback_data="useful_materials_callback",
                        )
                    ]
                ]
            )
            await c.bot.send_photo(
                user_id,
                FSInputFile("misk/spam/material.png"),
                # f"–ù–æ–≤—ã–π –ø–æ–ª–µ–∑–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª '{material.name}' –¥–æ—Å—Ç—É–ø–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª '–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'.",
                caption="""
<i>üå™Ô∏è –°–∏–ª–∞ –º—ã—Å–ª–∏ –≤ –¥–µ–π—Å—Ç–≤–∏–∏! </i>
<i><b>–ù–æ–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –∂–¥—ë—Ç –≤–∞—Å –≤ –±–æ—Ç–µ!</b> (–†–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω—è—Ç –∂–∏–∑–Ω—å).
</i>
<i>–ü—Ä–∏–≤–µ—Ç!</i>

<b><i>–†–∞–¥—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–æ—â–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º:</i></b> <i>–≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –ø–æ—è–≤–∏–ª—Å—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª,</i> –∫–æ—Ç–æ—Ä—ã–π <u><i>—Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º</i> </u><i><u>–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º</u></i> –∫ —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º.

‚ö°Ô∏è<b><i>–û —á—ë–º —ç—Ç–æ?</i></b> <i>–ú—ã —É–≥–ª—É–±–∏–º—Å—è –≤ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–Ω—Ç–µ–∑:</i>

<i><b><b><i>‚Ä¢</i></b></b> –ü—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏ –º—ã—à–ª–µ–Ω–∏—è ‚Äî –∫–∞–∫ –≤–∞—à–∏ –º—ã—Å–ª–∏ –±—É–∫–≤–∞–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å.
</i>
<i><b><b><i>‚Ä¢</i></b></b> –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —ç–∑–æ—Ç–µ—Ä–∏–∫–∏ ‚Äî –¥—Ä–µ–≤–Ω–∏–µ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–∏–ª–æ–π.</i>

<i>–ò —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ </i><i><b>‚Äî –†–ï–ó–£–õ–¨–¢–ê–¢,</b> –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –º—ã —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è:</i>

–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–æ—Ä–∏—è, –∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç –∑–Ω–∞–Ω–∏–π –∏ –ø—Ä–∞–∫—Ç–∏–∫, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç <b><i>‚Äî –≤–∞—à—É –Ω–æ–≤—É—é, –±–æ–ª–µ–µ —Å—á–∞—Å—Ç–ª–∏–≤—É—é –∏ —Å–≤–æ–±–æ–¥–Ω—É—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å</i></b> üí´<b><i>
</i></b>
<i>–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ!</i> 
<i>–≠—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª —É–∂–µ –∂–¥—ë—Ç –≤–∞—Å –≤ –±–æ—Ç–µ </i><b><i>–≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª</i></b> üß†
                """,
                reply_markup=keyboard,
                parse_mode="HTML",
            )
            success_count += 1
        except Exception:
            fail_count += 1

        # f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.\n–£—Å–ø–µ—à–Ω–æ: \n–ù–µ —É–¥–∞–ª–æ—Å—å: "
    await c.message.answer(
        f"""<b><i>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</i> üöÄ</b><i>
–£—Å–ø–µ—à–Ω–æ: {success_count}
–ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}</i>"""
    )
    await manager.switch_to(
        AdminStates.MATERIALS, show_mode=ShowMode.DELETE_AND_SEND
    )


async def dont_notify_users_handler(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    data = manager.dialog_data
    await add_useful_material(
        name=data["material_name"],
        message_id=data["message_id"],
        chat_id=data["chat_id"],
        created_by=c.from_user.id,
        is_free=data["is_free"],
    )
    await c.message.answer(
        f"<i>–ú–∞—Ç–µ—Ä–∏–∞–ª ¬´{data['material_name']}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.</i>"
    )
    await manager.switch_to(
        AdminStates.MATERIALS, show_mode=ShowMode.DELETE_AND_SEND
    )


async def on_main_menu(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.start(
        YogaClubStates.main,
        mode=StartMode.RESET_STACK,
        show_mode=ShowMode.EDIT,
    )


async def switch_to_statistics(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.start(StatisticStates.main, show_mode=ShowMode.EDIT)


async def switch_to_create_certificate(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.switch_to(
        AdminStates.CREATE_CERTIFICATE, show_mode=ShowMode.EDIT
    )


async def switch_to_links(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.switch_to(AdminStates.LINKS, show_mode=ShowMode.EDIT)


async def switch_to_payment_links(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.switch_to(AdminStates.PAYMENT_LINKS, show_mode=ShowMode.EDIT)


async def switch_to_ai_promo(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.switch_to(AdminStates.AIPROMO_MAIN, show_mode=ShowMode.EDIT)


async def switch_to_add_material_name(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.switch_to(
        AdminStates.ADD_MATERIAL_NAME, show_mode=ShowMode.EDIT
    )


async def switch_to_settings(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.switch_to(AdminStates.SETTINGS_MAIN, show_mode=ShowMode.EDIT)


async def switch_to_event_planning(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.switch_to(
        AdminStates.EVENT_PLANNING, show_mode=ShowMode.EDIT
    )


async def stop_payment(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.switch_to(AdminStates.STOP_PAYMENT, show_mode=ShowMode.EDIT)


async def get_rich(dialog_manager: DialogManager, **_):
    rich = await get_pay_photo_attachment(
        dialog_manager.event.bot, "misk/navigation/rich.png"
    )
    return {"rich": rich}


async def get_agutin(dialog_manager: DialogManager, **_):
    agutin = await get_pay_photo_attachment(
        dialog_manager.event.bot, "misk/navigation/agutin.jpg"
    )
    print(agutin)
    return {"agutin": agutin}


async def get_boss(dialog_manager: DialogManager, **_):
    boss = await get_pay_photo_attachment(
        dialog_manager.event.bot, "misk/navigation/boss.jpeg"
    )
    return {"boss": boss}


admin_dialog = Dialog(
    Window(
        # DynamicMedia("boss", when="boss"),
        Const("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"),
        Button(
            Const("üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"),
            id="broadcast",
            on_click=switch_to_broadcast,
        ),
        # Button(
        #     Const("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏"),
        #     id="materials",
        #     on_click=switch_to_materials,
        # ),
        # Button(
        #     Const("üí∏ –°—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É"),
        #     id="payment_links",
        #     on_click=switch_to_payment_links,
        # ),
        Button(
            Const("üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏"),
            id="links",
            on_click=switch_to_links,
        ),
        # Button(
        #     Const("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏"),
        #     id="prices",
        #     on_click=switch_to_prices,
        # ),
        # Button(
        #     Const("üéÅ AI-–ø—Ä–æ–º–æ–∫–æ–¥—ã"),
        #     id="ai_promo",
        #     on_click=switch_to_ai_promo,
        # ),
        # Button(
        #     Const("üí∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –∫–ª—É–±"),
        #     id="generate_free_yoga_club_promo",
        #     on_click=generate_free_yoga_club_promo,
        # ),
        Button(
            Const("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            id="statistics",
            on_click=switch_to_statistics,
        ),
        # Button(
        #     Const("üé´ –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"),
        #     id="create_certificate",
        #     on_click=switch_to_create_certificate,
        # ),
        # Button(
        #     Const("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
        #     id="event_planning",
        #     on_click=switch_to_event_planning,
        # ),
        Button(
            Const("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            id="main_menu",
            on_click=on_main_menu,
        ),
        state=AdminStates.MAIN,
        # getter=get_boss,
    ),
    Window(
        # DynamicMedia("materials_photo", when="materials_photo"),
        Const("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏:\n"),
        Format("{materials_list}"),
        Row(
            Button(
                Const("‚ûï –î–æ–±–∞–≤–∏—Ç—å"), id="add", on_click=switch_to_add_material
            ),
            Button(
                Const("üóë –£–¥–∞–ª–∏—Ç—å"),
                id="delete",
                on_click=switch_to_delete_material,
            ),
        ),
        Button(Const("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"), id="back", on_click=switch_to_main),
        state=AdminStates.MATERIALS,
        getter=get_materials_list,
    ),
    Window(
        Const("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª (–∞—É–¥–∏–æ/—Ç–µ–∫—Å—Ç/—Ñ–∞–π–ª/–≤–∏–¥–µ–æ):"),
        MessageInput(process_material_message),
        Button(
            Const("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"), id="back", on_click=switch_to_materials
        ),
        state=AdminStates.ADD_MATERIAL,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞:"),
        MessageInput(process_material_name),
        Button(
            Const("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"),
            id="back",
            on_click=switch_to_add_material,
        ),
        state=AdminStates.ADD_MATERIAL_NAME,
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"),
        Select(
            Format("{item.name}"),
            id="material_select",
            item_id_getter=lambda x: x.id,
            items="materials",
            on_click=on_material_selected,
        ),
        Button(
            Const("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"), id="back", on_click=switch_to_materials
        ),
        state=AdminStates.DELETE_MATERIAL,
        getter=get_materials_list,
    ),
    Window(
        Const("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –Ω–æ–≤–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ?"),
        Row(
            Button(
                Const("–î–∞"), id="notify_yes", on_click=notify_users_handler
            ),
            Button(
                Const("–ù–µ—Ç"),
                id="notify_no",
                on_click=dont_notify_users_handler,
            ),
        ),
        state=AdminStates.NOTIFICATION_CHOICE,
    ),
    *admin_certificates_windows,
    *prices_windows,
    *links_windows,
    *broadcast_easy_windows,
    *ai_promo_windows,
    *payment_links_windows,
)
