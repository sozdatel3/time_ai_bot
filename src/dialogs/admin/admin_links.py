from typing import Any

from aiogram.types import CallbackQuery, Message
from aiogram_dialog import Dialog, DialogManager, ShowMode, Window
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Button, Group, Select
from aiogram_dialog.widgets.text import Const, Format

from config.config import get_config
from db.models.old_workflow.links import create_bot_link, get_all_links
from dialogs.states import AdminStates


async def get_links_list(**kwargs):
    links = await get_all_links()
    links_text = "\n".join(
        [
            f"<b><i>‚Ä¢</i></b> {link.name}: {link.clicks} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤"
            for link in links
        ]
    )
    return {
        "links_text": links_text or "<b><i>‚Ä¢</i></b> –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫",
        "links": links,
    }


async def get_link_info(dialog_manager: DialogManager, **kwargs):
    link_id = dialog_manager.dialog_data.get("selected_link_id")
    links = await get_all_links()
    link = next((link for link in links if link.id == link_id), None)

    if not link:
        return {"link_info": "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

    config = get_config()
    bot_username = config.bot.name

    full_link = f"t.me/{bot_username}?start=link_{link.link_code}"

    info = (
        f"üìé –ù–∞–∑–≤–∞–Ω–∏–µ: {link.name}\n"
        f"üîó –ö–æ–¥: {link.link_code}\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {link.clicks}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {link.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"üåê –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{full_link}</code>"
    )

    if link.description:
        info = f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {link.description}\n" + info

    return {"link_info": info}


# async def process_link_name(
#     message: Message, dialog: Dialog, manager: DialogManager
# ):
#     name = message.text
#     description = None  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
#     link = await create_bot_link(name=name, description=description)

#     # config = manager.middleware_data.get("config")
#     config = get_config()
#     bot_username = config.bot.name

#     await message.answer(
#         f"–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n"
#         f"–ù–∞–∑–≤–∞–Ω–∏–µ: {link.name}\n"
#         f"–ö–æ–¥: {link.link_code}\n"
#         f"–ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞: t.me/{bot_username}?start=link_{link.link_code}"
#     )
#     await manager.switch_to(AdminStates.LINKS)


async def process_link_name(
    message: Message, dialog: Dialog, manager: DialogManager
):
    name = message.text
    manager.dialog_data["link_name"] = name
    await message.delete()
    await manager.switch_to(
        AdminStates.ADD_LINK_DESCRIPTION, show_mode=ShowMode.EDIT
    )


async def process_link_description(
    message: Message, dialog: Dialog, manager: DialogManager
):
    try:
        description = message.text
        name = manager.dialog_data.get("link_name")

        link = await create_bot_link(name=name, description=description)

        config = get_config()
        bot_username = config.bot.name

        await message.answer(
            f"‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìé –ù–∞–∑–≤–∞–Ω–∏–µ: {link.name}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"üîó –ö–æ–¥: {link.link_code}\n"
            f"üåê –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>t.me/{bot_username}?start=link_{link.link_code}</code>"
        )
        await message.delete()
        await manager.switch_to(
            AdminStates.LINKS, show_mode=ShowMode.DELETE_AND_SEND
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


async def skip_description(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    name = manager.dialog_data.get("link_name")
    link = await create_bot_link(name=name)

    config = get_config()
    bot_username = config.bot.name

    await c.message.answer(
        f"‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üìé –ù–∞–∑–≤–∞–Ω–∏–µ: {link.name}\n"
        f"üîó –ö–æ–¥: {link.link_code}\n"
        f"üåê –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>t.me/{bot_username}?start=link_{link.link_code}</code>"
    )
    await manager.switch_to(
        AdminStates.LINKS, show_mode=ShowMode.DELETE_AND_SEND
    )


async def send_all_links(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    links = await get_all_links()
    config = get_config()
    bot_username = config.bot.name

    links_text = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:\n\n"
    for link in links:
        full_link = f"t.me/{bot_username}?start=link_{link.link_code}"
        links_text += f"<b><i>‚Ä¢</i></b> {link.name}\n{full_link}\n\n"

    await c.message.answer(links_text)
    await manager.switch_to(
        AdminStates.LINKS, show_mode=ShowMode.DELETE_AND_SEND
    )


async def on_link_selected(
    c: CallbackQuery, widget: Any, manager: DialogManager, item_id: str
):
    manager.dialog_data["selected_link_id"] = int(item_id)
    await manager.switch_to(
        AdminStates.EDIT_LINK, show_mode=ShowMode.DELETE_AND_SEND
    )


async def switch_to_add_link(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.switch_to(AdminStates.ADD_LINK, show_mode=ShowMode.EDIT)


async def back_to_links(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.switch_to(AdminStates.LINKS, show_mode=ShowMode.EDIT)


async def back_to_main(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    await manager.switch_to(
        AdminStates.MAIN, show_mode=ShowMode.DELETE_AND_SEND
    )


links_windows = [
    Window(
        Const("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏:\n"),
        Format("{links_text}"),
        Button(
            Const("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É"),
            id="add_link",
            on_click=switch_to_add_link,
        ),
        Button(
            Const("üîó –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏"),
            id="send_all_links",
            on_click=send_all_links,
        ),
        Group(
            Select(
                Format("{item.name}: {item.clicks} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤"),
                id="link_select",
                item_id_getter=lambda x: x.id,
                items="links",
                on_click=on_link_selected,
            ),
            width=1,
        ),
        Button(Const("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"), id="back", on_click=back_to_main),
        state=AdminStates.LINKS,
        getter=get_links_list,
    ),
    Window(
        Const("<i>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏:</i>"),
        MessageInput(process_link_name),
        Button(Const("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"), id="back", on_click=back_to_links),
        state=AdminStates.ADD_LINK,
    ),
    Window(
        Const(
            "<i>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª):</i>"
        ),
        MessageInput(process_link_description),
        Button(Const("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"), id="skip", on_click=skip_description),
        Button(Const("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"), id="back", on_click=back_to_links),
        state=AdminStates.ADD_LINK_DESCRIPTION,
    ),
    Window(
        Const("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Å—ã–ª–∫–µ:\n"),
        Format("{link_info}"),
        Button(
            Const("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"),
            id="back",
            on_click=back_to_links,
        ),
        state=AdminStates.EDIT_LINK,
        getter=get_link_info,
    ),
]
