from aiogram.types import CallbackQuery, Message
from aiogram_dialog import DialogManager, ShowMode, Window
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Button, Row
from aiogram_dialog.widgets.text import Const

from db.models.ai_promo import (
    create_ai_promo,
    get_all_ai_promos,
)
from dialogs.states import AdminStates


async def get_ai_promos_list(dialog_manager: DialogManager, **_):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö AI –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    promos = await get_all_ai_promos()
    promo_list = []

    for promo in promos:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if promo.is_active else "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
        promo_info = {
            "id": promo.id,
            "hash": promo.hash[:8]
            + "...",  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤
            "count": promo.count_of_predict,
            "status": status,
            "created_at": (
                promo.created_at.strftime("%d.%m.%Y %H:%M")
                if promo.created_at
                else "N/A"
            ),
            "display": f"üéÅ {promo.count_of_predict} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ | {status} | {promo.created_at.strftime('%d.%m.%Y') if promo.created_at else 'N/A'}",
        }
        promo_list.append(promo_info)

    return {"promos": promo_list, "promos_count": len(promo_list)}


async def switch_to_main(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    await manager.switch_to(AdminStates.MAIN, show_mode=ShowMode.EDIT)


async def switch_to_create_promo(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    await manager.switch_to(
        AdminStates.AIPROMO_COUNT_INPUT, show_mode=ShowMode.EDIT
    )


async def switch_to_promo_list(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    await manager.switch_to(AdminStates.AIPROMO_MAIN, show_mode=ShowMode.EDIT)


async def back_to_promo_main(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    await manager.switch_to(AdminStates.AIPROMO_MAIN, show_mode=ShowMode.EDIT)


async def process_promo_count(
    message: Message, dialog, manager: DialogManager
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    try:
        count = int(message.text)
        if count <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return

        manager.dialog_data["promo_count"] = count
        admin_id = message.from_user.id

        # try:
        promo, url = await create_ai_promo(admin_id, count)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∞–¥–º–∏–Ω—É
        await message.delete()
        await message.answer(
            f"""
–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

<b><i>‚Ä¢</i></b> –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {count}
<b><i>‚Ä¢</i></b> –°—Å—ã–ª–∫–∞:
<code>{url}</code>

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å.
            """,
            parse_mode="HTML",
        )

        await manager.switch_to(
            AdminStates.AIPROMO_MAIN, show_mode=ShowMode.EDIT
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {str(e)}")


async def confirm_create_promo(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""


async def cancel_create_promo(
    c: CallbackQuery, button: Button, manager: DialogManager
):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    await manager.switch_to(AdminStates.AIPROMO_MAIN, show_mode=ShowMode.EDIT)


# async def on_promo_selected(
#     c: CallbackQuery, widget: Any, manager: DialogManager, item_id: str
# ):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
#     promo_id = int(item_id)

#     success = await deactivate_ai_promo(promo_id)
#     if success:
#         await c.message.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
#     else:
#         await c.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞")

#     await manager.switch_to(
#         AdminStates.AIPROMO_LIST, show_mode=ShowMode.DELETE_AND_SEND
#     )


ai_promo_windows = [
    Window(
        Const(
            """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI-–ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:

–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫–∏ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ AI-–ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        ),
        Row(
            Button(
                Const("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"),
                id="create_promo",
                on_click=switch_to_create_promo,
            ),
        ),
        Button(
            Const("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"),
            id="back_to_admin",
            on_click=switch_to_main,
        ),
        state=AdminStates.AIPROMO_MAIN,
        parse_mode="HTML",
    ),
    Window(
        Const(
            "<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö AI-–ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–æ—Ç 1 –¥–æ 100):</i>"
        ),
        MessageInput(process_promo_count),
        Button(
            Const("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"),
            id="back",
            on_click=back_to_promo_main,
        ),
        state=AdminStates.AIPROMO_COUNT_INPUT,
        parse_mode="HTML",
    ),
    #     Window(
    #         Format(
    #             """
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {dialog_data[promo_count]}
    # –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?
    #             """
    #         ),
    #         Row(
    #             Button(
    #                 Const("‚úÖ –°–æ–∑–¥–∞—Ç—å"),
    #                 id="confirm",
    #                 on_click=,
    #             ),
    #             Button(
    #                 Const("‚ùå –û—Ç–º–µ–Ω–∞"),
    #                 id="cancel",
    #                 on_click=cancel_create_promo,
    #             ),
    #         ),
    #     state=AdminStates.AIPROMO_CONFIRM,
    #     parse_mode="HTML",
    # ),
    # Window(
    #     Const("üìã <b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>"),
    #     Format("\nüìä –í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {promos_count}"),
    #     Select(
    #         Format("{item[display]}"),
    #         id="promo_select",
    #         item_id_getter=lambda x: x["id"],
    #         items="promos",
    #         on_click=on_promo_selected,
    #     ),
    #     Button(
    #         Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
    #         id="back",
    #         on_click=back_to_promo_main,
    #     ),
    #     state=AdminStates.AIPROMO_LIST,
    #     getter=get_ai_promos_list,
    #     parse_mode="HTML",
    # ),
]
