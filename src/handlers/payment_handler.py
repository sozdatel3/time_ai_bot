from aiogram import Bot
from aiogram.types import (
    FSInputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)

from config.config import get_config, load_config
from db.models.old_workflow.certificate import get_certificate
from db.models.order import Order, update_order_status
from db.models.price import BASE_PRICES_RU
from db.models.user import (
    get_user,
    get_user_created_at,
    increase_free_predictions_count,
    update_user_balance_to_use_this_month,
    update_user_frozen_balance,
)

config = load_config()


class PaymentHandler:
    def __init__(self, bot: Bot):
        self.bot = bot

    async def handle_payment(self, order: Order):
        # if order.status == "completed":
        config = get_config()
        # spam_manager = config.get_spam_manager()
        user = await get_user(order.user_id)
        try:
            await update_user_balance_to_use_this_month(order.user_id, 0)
        except Exception as e:
            print(e)
        try:
            created_at = await get_user_created_at(order.user_id)
        except Exception:
            created_at = None

        # if user.refer_id:
        #     try:
        #         refer_user = await get_user(user.refer_id)
        #         await update_user_balance(
        #             user.refer_id,
        #             refer_user.balance + (order.amount * 0.1),
        #         )
        #         refer_user = await get_user(user.refer_id)
        #         # await spam_manager.send_spam_message(
        #         #     user.refer_id,
        #         #     type_of_spam="thanks_for_referral",
        #         #     name=refer_user.name,
        #         #     balance=refer_user.balance,
        #         # )
        #     except Exception as e:
        #         print(e)
        if order.product in BASE_PRICES_RU:
            buy = f"{BASE_PRICES_RU[order.product]}"
        elif order.product.startswith("custom_payment_link:"):
            buy = "–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞"
            for admin_id in config.admin_ids:
                try:
                    await self.bot.send_message(
                        admin_id,
                        f"""
ü™Ñ<i> –ö—Ç–æ-—Ç–æ –ø—Ä–∏–æ–±—Ä—ë–ª –ø—Ä–æ–¥—É–∫—Ç ¬´{buy}¬ª –Ω–∞ —Å—É–º–º—É {order.amount} —Ä—É–±–ª–µ–π.</i>
                """,
                    )
                except Exception as e:
                    print(e)
            await update_order_status(order.id, "completed")
            return

        else:
            buy = f"{order.product}"
        # sum_display = f'{order.amount:,}.replace(",", " ")}'
        sum_display = f"{order.amount:,}".replace(",", " ")
        for admin_id in config.admin_ids:
            try:
                await self.bot.send_message(
                    admin_id,
                    f"""
ü™Ñ<i> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –ø—Ä–∏–æ–±—Ä—ë–ª –ø—Ä–æ–¥—É–∫—Ç ¬´{buy}¬ª –Ω–∞ —Å—É–º–º—É {sum_display} —Ä—É–±–ª–µ–π.
</i><i><b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {created_at}</i>
                """,
                )
            except Exception as e:
                print(e)

        await update_order_status(order.id, "completed")
        try:
            await update_user_frozen_balance(
                order.user_id, order.balance_to_use
            )
        except Exception as e:
            print(e)
        # if order.product == "certificate":
        #     await self._handle_certificate_payment(order)
        # if (
        #     order.product == "subscription_start"
        #     or order.product == "subscription"
        # ):
        #     await self._handle_yoga_club_payment(order)
        # elif order.game_id < 0:
        #     await self._handle_brief_payment(order)

        if order.product == "ai_prediction":
            await self._handle_ai_payment(order)
        else:
            await self._handle_default_payment(order)

    async def _handle_certificate_payment(self, order: Order):
        certificate = await get_certificate(order.game_id)
        if certificate:
            # Send certificate image first
            await self.bot.send_photo(
                order.user_id,
                photo=FSInputFile("src/misk/sertificate.PNG"),
                caption=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞!\n\n–ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ - –ø–µ—Ä–µ—à–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é –∏ –æ–Ω –ø–æ–ª—É—á–∏—Ç —Å—É—É–º—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å! –í–æ—Ç <a href='{certificate.url}'>—Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</a>",
            )
        else:
            print(f"–û—à–∏–±–∫–∞: —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å id {order.game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    async def _handle_brief_payment(self, order: Order):
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –±—Ä–∏—Ñ—É",
                        callback_data=f"shitbrief:{order.id}",
                    )
                ]
            ]
        )
        await self.bot.send_message(
            order.user_id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –±—Ä–∏—Ñ, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.",
            reply_markup=keyboard,
        )

    async def _handle_ai_payment(self, order: Order):
        # await self.bot.send_message(
        #     order.user_id,
        #     f"–ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
        # )
        await increase_free_predictions_count(order.user_id)
        await self.bot.send_message(
            order.user_id,
            """<i>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–∫—É–ø–∫—É –∏ –∑–∞ –æ–∫–∞–∑–∞–Ω–Ω–æ–µ –¥–æ–≤–µ—Ä–∏–µ ü™∂</i>
<i>
[</i> <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª </i><i><b>¬´AI-–ø—Ä–æ–≥–Ω–æ–∑¬ª</b> –∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.</i> <i>]</i>""",
        )

    async def _handle_default_payment(self, order: Order):
        # await self.bot.send_message(
        #     order.user_id,
        #     f"–ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
        # )
        await self.bot.send_message(
            order.user_id,
            """<i>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–∫—É–ø–∫—É –∏ –∑–∞ –æ–∫–∞–∑–∞–Ω–Ω–æ–µ –¥–æ–≤–µ—Ä–∏–µ ü™∂</i>
<i>
</i>[ <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ò–Ω–Ω–æ–π –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥–∏: </i><i>@bulgarova_astrolog</i><i> ]</i>""",
            parse_mode="HTML",
        )

    async def _handle_yoga_club_payment(self, order: Order):
        await self.bot.send_photo(
            order.user_id,
            photo=FSInputFile("src/misk/spam/subscription_is_active.png"),
            caption="""
<b><i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—Ä—É–≥ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö ü´Ç</i></b>

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ <u>–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</u> <i>‚Äî —Ç–µ–ø–µ—Ä—å –≤—ã —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –≥–¥–µ –º–µ—á—Ç—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é.</i> <i>–í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ </i><i><b>–æ—Ç–∫—Ä—ã–ª–∏ –¥–≤–µ—Ä—å</b> –≤ –º–∏—Ä, –≥–¥–µ:</i>

<i><b><b><i>‚Ä¢</i></b></b> –í–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è –∏ —Ü–µ–ª–∏ ‚Äî –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π —Ñ–æ–∫—É—Å.
</i>
<i><b><b><i>‚Ä¢</i></b></b> –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –≤–∞—à–µ –∏–∑–æ–±–∏–ª–∏–µ, –∑–¥–æ—Ä–æ–≤—å–µ –∏ —Å—á–∞—Å—Ç—å–µ.
</i>
<i><b><b><i>‚Ä¢</i></b></b> –ï–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∫–∞–∂–¥—ã–π –≤–∞—à —à–∞–≥ –∫ –∏–¥–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏.</i>

<i><b>–í—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø</b> ‚Äî –≤—ã </i><i><u>–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏</u> –≤ –≤–µ—Ä—Å–∏—é —Å–µ–±—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –∂–¥—ë—Ç, –∞ —Å–æ–∑–¥–∞—ë—Ç</i> üß†

–¢–µ–ø–µ—Ä—å –≤—ã –±–ª–∏–∂–µ –∫ —Å–≤–æ–µ–π –º–µ—á—Ç–µ, —á–µ–º –∫–æ–≥–¥–∞-–ª–∏–±–æ. <i><b>–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å</b> ‚Äî –≤—ã —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–æ–π–Ω—ã!</i>
            """,
        )
