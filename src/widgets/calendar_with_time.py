from __future__ import annotations

from collections.abc import Callable
from datetime import date, datetime, time
from enum import Enum
from typing import Any, Optional, Protocol, Union

from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram_dialog.api.entities import ChatEvent
from aiogram_dialog.api.protocols import DialogManager
from aiogram_dialog.widgets.common import WhenCondition
from aiogram_dialog.widgets.kbd.calendar_kbd import (
    Calendar,
    CalendarConfig,
    CalendarScope,
    ManagedCalendar,
    date_from_raw,
)
from aiogram_dialog.widgets.text import Format, Text
from aiogram_dialog.widgets.widget_event import (
    WidgetEventProcessor,
    ensure_event_processor,
)

# –ù–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
CALLBACK_SCOPE_TIME = "TIME"
CALLBACK_PREFIX_HOUR = "HOUR"
CALLBACK_BACK_TO_DATE = "BACK_DATE"
HOURS_HEADER_TEXT = Format("üïê –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –¥–ª—è {date:%d.%m.%Y}")
HOUR_TEXT = Format("{hour:02d}:00")
SELECTED_HOUR_TEXT = Format("[ {hour:02d}:00 ]")
BACK_TO_DATE_TEXT = Format("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")


class CalendarTimeScope(Enum):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ scope –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –≤—Ä–µ–º–µ–Ω–µ–º"""

    DAYS = "DAYS"
    MONTHS = "MONTHS"
    YEARS = "YEARS"
    TIME = "TIME"  # –ù–æ–≤—ã–π scope –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏


class OnDateTimeSelected(Protocol):
    """–ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""

    async def __call__(
        self,
        event: ChatEvent,
        widget: ManagedCalendarWithTime,
        dialog_manager: DialogManager,
        selected_datetime: datetime,
        /,
    ) -> Any:
        raise NotImplementedError


class CalendarTimeView:
    """View –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""

    def __init__(
        self,
        callback_generator: Callable[[str], str],
        hour_text: Text = HOUR_TEXT,
        selected_hour_text: Text = SELECTED_HOUR_TEXT,
        header_text: Text = HOURS_HEADER_TEXT,
        back_text: Text = BACK_TO_DATE_TEXT,
    ):
        self.callback_generator = callback_generator
        self.hour_text = hour_text
        self.selected_hour_text = selected_hour_text
        self.header_text = header_text
        self.back_text = back_text

    async def _render_hour_button(
        self,
        hour: int,
        selected_hour: Optional[int],
        data: dict,
        manager: DialogManager,
    ) -> InlineKeyboardButton:
        hour_data = {
            "hour": hour,
            "data": data,
        }

        if hour == selected_hour:
            text = self.selected_hour_text
        else:
            text = self.hour_text

        return InlineKeyboardButton(
            text=await text.render_text(hour_data, manager),
            callback_data=self.callback_generator(
                f"{CALLBACK_PREFIX_HOUR}{hour}"
            ),
        )

    async def _render_hours(
        self,
        data: dict,
        manager: DialogManager,
        selected_hour: Optional[int] = None,
    ) -> list[list[InlineKeyboardButton]]:
        """–†–µ–Ω–¥–µ—Ä–∏–º –∫–Ω–æ–ø–∫–∏ —Å —á–∞—Å–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 3x8 –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        keyboard = []

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–∞—Å—ã –ø–æ 3 –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        for row_start in range(0, 24, 3):
            row = []
            for col in range(3):
                hour = row_start + col
                if hour < 24:
                    row.append(
                        await self._render_hour_button(
                            hour, selected_hour, data, manager
                        )
                    )
            if row:
                keyboard.append(row)

        return keyboard

    async def _render_header(
        self,
        selected_date: date,
        data: dict,
        manager: DialogManager,
    ) -> list[InlineKeyboardButton]:
        header_data = {
            "date": selected_date,
            "data": data,
        }
        return [
            InlineKeyboardButton(
                text=await self.header_text.render_text(header_data, manager),
                callback_data="",
            )
        ]

    async def _render_back_button(
        self,
        data: dict,
        manager: DialogManager,
    ) -> list[InlineKeyboardButton]:
        """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"""
        return [
            InlineKeyboardButton(
                text=await self.back_text.render_text(data, manager),
                callback_data=self.callback_generator(CALLBACK_BACK_TO_DATE),
            )
        ]

    async def render(
        self,
        selected_date: date,
        data: dict,
        manager: DialogManager,
        selected_hour: Optional[int] = None,
    ) -> list[list[InlineKeyboardButton]]:
        return [
            await self._render_header(selected_date, data, manager),
            *await self._render_hours(data, manager, selected_hour),
            await self._render_back_button(data, manager),
        ]


class CalendarWithTime(Calendar):
    """–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å–æ–≤)"""

    def __init__(
        self,
        id: str,
        on_click: Union[OnDateTimeSelected, WidgetEventProcessor, None] = None,
        config: Optional[CalendarConfig] = None,
        when: WhenCondition = None,
    ) -> None:
        # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º super().__init__ —Å on_click, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏–∫—É
        super().__init__(
            id=id,
            on_click=None,  # –ü–µ—Ä–µ–¥–∞–µ–º None, —Ç–∞–∫ –∫–∞–∫ –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–∞–º–∏
            config=config,
            when=when,
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        self.on_datetime_selected = ensure_event_processor(on_click)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        self._handlers[CALLBACK_BACK_TO_DATE] = self._handle_back_to_date

    def _init_views(self) -> dict[CalendarScope, Any]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º views –≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–π TimeView"""
        views = super()._init_views()
        # –î–æ–±–∞–≤–ª—è–µ–º view –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
        views[CalendarTimeScope.TIME] = CalendarTimeView(
            self._item_callback_data
        )
        return views

    def get_scope(
        self, manager: DialogManager
    ) -> Union[CalendarScope, CalendarTimeScope]:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ TIME scope"""
        calendar_data = self.get_widget_data(manager, {})
        current_scope = calendar_data.get("current_scope")

        if current_scope == CalendarTimeScope.TIME.value:
            return CalendarTimeScope.TIME

        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥
        return super().get_scope(manager)

    def set_scope(
        self,
        new_scope: Union[CalendarScope, CalendarTimeScope],
        manager: DialogManager,
    ) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º scope —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TIME"""
        data = self.get_widget_data(manager, {})
        if isinstance(new_scope, CalendarTimeScope):
            data["current_scope"] = new_scope.value
        else:
            data["current_scope"] = new_scope.value

    def get_selected_date(self, manager: DialogManager) -> Optional[date]:
        """–ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
        data = self.get_widget_data(manager, {})
        selected_date_str = data.get("selected_date")
        if selected_date_str:
            return date.fromisoformat(selected_date_str)
        return None

    def set_selected_date(
        self, selected_date: date, manager: DialogManager
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
        data = self.get_widget_data(manager, {})
        data["selected_date"] = selected_date.isoformat()

    def get_selected_hour(self, manager: DialogManager) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å"""
        data = self.get_widget_data(manager, {})
        return data.get("selected_hour")

    def set_selected_hour(self, hour: int, manager: DialogManager) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å"""
        data = self.get_widget_data(manager, {})
        data["selected_hour"] = hour

    async def _render_keyboard(self, data, manager: DialogManager):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ TIME scope"""
        scope = self.get_scope(manager)

        if scope == CalendarTimeScope.TIME:
            # –†–µ–Ω–¥–µ—Ä–∏–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
            view = self.views[CalendarTimeScope.TIME]
            selected_date = self.get_selected_date(manager)
            selected_hour = self.get_selected_hour(manager)

            if selected_date:
                return await view.render(
                    selected_date, data, manager, selected_hour
                )
            else:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
                self.set_scope(CalendarScope.DAYS, manager)
                return await super()._render_keyboard(data, manager)
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö scope –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥
            return await super()._render_keyboard(data, manager)

    async def _handle_click_date(
        self, data: str, manager: DialogManager
    ) -> None:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–ª–∏–∫–∞ –ø–æ –¥–∞—Ç–µ"""
        selected_date = date_from_raw(int(data))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        self.set_selected_date(selected_date, manager)

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
        self.set_scope(CalendarTimeScope.TIME, manager)

    async def _handle_click_hour(
        self, data: str, manager: DialogManager
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞"""
        hour = int(data[len(CALLBACK_PREFIX_HOUR) :])
        selected_date = self.get_selected_date(manager)

        if selected_date:
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç
            selected_time = time(hour=hour, minute=0, second=0)
            selected_datetime = datetime.combine(selected_date, selected_time)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å
            self.set_selected_hour(hour, manager)

            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            await self.on_datetime_selected.process_event(
                manager.event,
                self.managed(manager),
                manager,
                selected_datetime,
            )

    async def _handle_back_to_date(
        self, data: str, manager: DialogManager
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"""
        # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ —á–∞—Å
        widget_data = self.get_widget_data(manager, {})
        widget_data.pop("selected_date", None)
        widget_data.pop("selected_hour", None)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
        self.set_scope(CalendarScope.DAYS, manager)

    async def _process_item_callback(
        self,
        callback: CallbackQuery,
        data: str,
        dialog,
        manager: DialogManager,
    ) -> bool:
        """–†–∞—Å—à–∏—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        if data.startswith(CALLBACK_PREFIX_HOUR):
            await self._handle_click_hour(data, manager)
            return True
        elif data == CALLBACK_BACK_TO_DATE:
            await self._handle_back_to_date(data, manager)
            return True

        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥
        return await super()._process_item_callback(
            callback, data, dialog, manager
        )

    def managed(self, manager: DialogManager) -> ManagedCalendarWithTime:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π managed –≤–∏–¥–∂–µ—Ç"""
        return ManagedCalendarWithTime(self, manager)


class ManagedCalendarWithTime(ManagedCalendar):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π managed –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏"""

    widget: CalendarWithTime

    def get_selected_date(self) -> Optional[date]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
        return self.widget.get_selected_date(self.manager)

    def get_selected_hour(self) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å"""
        return self.widget.get_selected_hour(self.manager)

    def get_selected_datetime(self) -> Optional[datetime]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∫–∞–∫ datetime"""
        date = self.get_selected_date()
        hour = self.get_selected_hour()

        if date and hour is not None:
            return datetime.combine(date, time(hour=hour, minute=0, second=0))
        return None

    def reset_selection(self) -> None:
        """–°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"""
        data = self.widget.get_widget_data(self.manager, {})
        data.pop("selected_date", None)
        data.pop("selected_hour", None)
        self.widget.set_scope(CalendarScope.DAYS, self.manager)
