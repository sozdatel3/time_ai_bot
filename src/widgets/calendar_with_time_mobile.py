"""
–ú–æ–±–∏–ª—å–Ω–æ-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è CalendarWithTime
"""

from typing import Optional

from aiogram.types import InlineKeyboardButton
from aiogram_dialog.api.protocols import DialogManager
from aiogram_dialog.widgets.text import Format

from widgets.calendar_with_time import (
    CalendarTimeView,
    CalendarWithTime,
)


class MobileTimeView(CalendarTimeView):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ view –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""

    async def _render_hours(
        self,
        data: dict,
        manager: DialogManager,
        selected_hour: Optional[int] = None,
    ) -> list[list[InlineKeyboardButton]]:
        """–†–µ–Ω–¥–µ—Ä–∏–º —á–∞—Å—ã –æ—Ç 00 –¥–æ 23, –ø–æ 4 –≤ —Ä—è–¥"""
        keyboard = []
        row = []
        for hour in range(24):
            row.append(
                await self._render_hour_button(
                    hour, selected_hour, data, manager
                )
            )
            if len(row) == 4:
                keyboard.append(row)
                row = []
        return keyboard


class MobileCalendarWithTime(CalendarWithTime):
    """–ú–æ–±–∏–ª—å–Ω–æ-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏"""

    def _init_views(self):
        """–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–±–∏–ª—å–Ω–æ-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π TimeView"""
        views = super()._init_views()
        # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π TimeView –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã–π
        from widgets.calendar_with_time import CalendarTimeScope

        views[CalendarTimeScope.TIME] = MobileTimeView(
            self._item_callback_data,
            hour_text=Format("{hour:02d}:00"),
            selected_hour_text=Format("‚úÖ {hour:02d}:00"),
            header_text=Format("üìÖ {date:%d.%m.%Y}\nüïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:"),
            back_text=Format("‚óÄÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"),
        )
        return views


# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
class QuickTimeView(CalendarTimeView):
    """View —Å –±—ã—Å—Ç—Ä—ã–º –≤—ã–±–æ—Ä–æ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""

    def __init__(self, *args, popular_hours=None, **kwargs):
        super().__init__(*args, **kwargs)
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —á–∞—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.popular_hours = popular_hours or [
            9,
            10,
            11,
            14,
            15,
            16,
            17,
            18,
            19,
        ]

    async def _render_hours(
        self,
        data: dict,
        manager: DialogManager,
        selected_hour: Optional[int] = None,
    ) -> list[list[InlineKeyboardButton]]:
        """–†–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —á–∞—Å—ã + –∫–Ω–æ–ø–∫–∞ "–í—Å–µ —á–∞—Å—ã" """
        keyboard = []

        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —á–∞—Å—ã
        keyboard.append(
            [
                InlineKeyboardButton(
                    text="‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –≤—Ä–µ–º—è", callback_data=""
                )
            ]
        )

        row = []
        for hour in self.popular_hours:
            row.append(
                await self._render_hour_button(
                    hour, selected_hour, data, manager
                )
            )
            if len(row) == 3:
                keyboard.append(row)
                row = []
        if row:
            keyboard.append(row)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —á–∞—Å–æ–≤
        keyboard.append(
            [
                InlineKeyboardButton(
                    text="üïê –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —á–∞—Å—ã",
                    callback_data=self.callback_generator("SHOW_ALL_HOURS"),
                )
            ]
        )

        return keyboard


class QuickCalendarWithTime(CalendarWithTime):
    """–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –±—ã—Å—Ç—Ä—ã–º –≤—ã–±–æ—Ä–æ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""

    def __init__(self, *args, popular_hours=None, **kwargs):
        super().__init__(*args, **kwargs)
        self.popular_hours = popular_hours
        self.show_all_hours = False

    def _init_views(self):
        """–ò—Å–ø–æ–ª—å–∑—É–µ–º QuickTimeView –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
        views = super()._init_views()
        from widgets.calendar_with_time import CalendarTimeScope

        if not self.show_all_hours:
            views[CalendarTimeScope.TIME] = QuickTimeView(
                self._item_callback_data,
                popular_hours=self.popular_hours,
                hour_text=Format("{hour:02d}:00"),
                selected_hour_text=Format("‚úÖ {hour:02d}:00"),
                header_text=Format("üìÖ {date:%d.%m.%Y}"),
            )
        return views

    async def _process_item_callback(self, callback, data, dialog, manager):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —á–∞—Å–æ–≤"""
        if data == "SHOW_ALL_HOURS":
            self.show_all_hours = True
            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç
            self._init_views()
            return True

        return await super()._process_item_callback(
            callback, data, dialog, manager
        )
