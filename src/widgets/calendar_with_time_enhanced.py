"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è CalendarWithTime —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
"""

from datetime import date, datetime, timedelta
from typing import List, Optional, Tuple

from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram_dialog.api.protocols import DialogManager
from aiogram_dialog.widgets.text import Format, Text

from widgets.calendar_with_time import (
    CalendarScope,
    CalendarTimeScope,
    CalendarTimeView,
    CalendarWithTime,
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
CALLBACK_BACK_TO_CALENDAR = "BACK_CAL"
BACK_TO_CALENDAR_TEXT = Format("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")


class EnhancedTimeView(CalendarTimeView):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π view –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""

    def __init__(
        self,
        callback_generator,
        hour_text=None,
        selected_hour_text=None,
        header_text=None,
        back_text: Text = BACK_TO_CALENDAR_TEXT,
        hour_range: Optional[Tuple[int, int]] = None,  # (start_hour, end_hour)
        disabled_hours: Optional[List[int]] = None,
    ):
        super().__init__(
            callback_generator,
            hour_text or Format("{hour:02d}:00"),
            selected_hour_text or Format("[ {hour:02d}:00 ]"),
            header_text or Format("üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {date:%d.%m.%Y}"),
        )
        self.back_text = back_text
        self.hour_range = hour_range or (0, 23)
        self.disabled_hours = disabled_hours or []

    async def _render_hour_button(
        self,
        hour: int,
        selected_hour: Optional[int],
        data: dict,
        manager: DialogManager,
    ) -> InlineKeyboardButton:
        """–†–µ–Ω–¥–µ—Ä–∏–º –∫–Ω–æ–ø–∫—É —á–∞—Å–∞ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —ç—Ç–æ—Ç —á–∞—Å
        start_hour, end_hour = self.hour_range
        if hour < start_hour or hour > end_hour or hour in self.disabled_hours:
            # –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —á–∞—Å - –ø—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞
            return InlineKeyboardButton(text="‚Äî", callback_data="")

        return await super()._render_hour_button(
            hour, selected_hour, data, manager
        )

    async def _render_back_button(
        self,
        data: dict,
        manager: DialogManager,
    ) -> list[InlineKeyboardButton]:
        """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
        return [
            InlineKeyboardButton(
                text=await self.back_text.render_text(data, manager),
                callback_data=self.callback_generator(
                    CALLBACK_BACK_TO_CALENDAR
                ),
            )
        ]

    async def render(
        self,
        selected_date: date,
        data: dict,
        manager: DialogManager,
        selected_hour: Optional[int] = None,
    ) -> list[list[InlineKeyboardButton]]:
        """–†–µ–Ω–¥–µ—Ä–∏–º —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        keyboard = await super().render(
            selected_date, data, manager, selected_hour
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        keyboard.append(await self._render_back_button(data, manager))
        return keyboard


class CalendarWithTimeEnhanced(CalendarWithTime):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏"""

    def __init__(
        self,
        id: str,
        on_click=None,
        config=None,
        when=None,
        hour_range: Optional[Tuple[int, int]] = None,
        disabled_hours: Optional[List[int]] = None,
        show_current_selection: bool = True,
    ):
        super().__init__(id, on_click, config, when)
        self.hour_range = hour_range
        self.disabled_hours = disabled_hours
        self.show_current_selection = show_current_selection

    def _init_views(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º views —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º TimeView"""
        views = super()._init_views()
        # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π TimeView –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π
        views[CalendarTimeScope.TIME] = EnhancedTimeView(
            self._item_callback_data,
            hour_range=self.hour_range,
            disabled_hours=self.disabled_hours,
        )
        return views

    async def _handle_back_to_calendar(
        self, data: str, manager: DialogManager
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
        # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        widget_data = self.get_widget_data(manager, {})
        widget_data.pop("selected_date", None)
        widget_data.pop("selected_hour", None)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
        self.set_scope(CalendarScope.DAYS, manager)

    async def _process_item_callback(
        self,
        callback,
        data: str,
        dialog,
        manager: DialogManager,
    ) -> bool:
        """–†–∞—Å—à–∏—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
        if data == CALLBACK_BACK_TO_CALENDAR:
            await self._handle_back_to_calendar(data, manager)
            return True

        return await super()._process_item_callback(
            callback, data, dialog, manager
        )


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π
class BusinessHoursCalendar(CalendarWithTimeEnhanced):
    """–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤"""

    def __init__(self, id: str, on_click=None, config=None, when=None):
        # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã —Å 9 –¥–æ 18, –æ–±–µ–¥ —Å 13 –¥–æ 14
        super().__init__(
            id=id,
            on_click=on_click,
            config=config,
            when=when,
            hour_range=(9, 18),
            disabled_hours=[13],  # –û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤
        )

    async def _get_disabled_hours_for_date(
        self, selected_date: date, manager: DialogManager
    ) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–Ω—è—Ç—ã–µ —á–∞—Å—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
        # –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ
        if selected_date.weekday() in [5, 6]:  # –°—É–±–±–æ—Ç–∞, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            return list(range(24))  # –í—Å–µ —á–∞—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –∏–∑ –ë–î
        # booked_hours = await get_booked_hours(selected_date)
        booked_hours = [10, 11, 15]  # –ü—Ä–∏–º–µ—Ä

        return [13] + booked_hours  # –û–±–µ–¥ + –∑–∞–Ω—è—Ç—ã–µ —á–∞—Å—ã


# –ü—Ä–∏–º–µ—Ä —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
async def smart_datetime_handler(
    c: CallbackQuery,
    widget: CalendarWithTimeEnhanced,
    manager: DialogManager,
    selected_datetime: datetime,
):
    """–£–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    # is_available = await check_slot_availability(selected_datetime)

    # –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (2 —á–∞—Å–∞ –≤–ø–µ—Ä–µ–¥)
    min_booking_time = datetime.now() + timedelta(hours=2)
    if selected_datetime < min_booking_time:
        await c.answer(
            "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ –º–∏–Ω–∏–º—É–º –∑–∞ 2 —á–∞—Å–∞", show_alert=True
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    manager.dialog_data["selected_datetime"] = selected_datetime

    await c.answer(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_datetime.strftime('%d.%m.%Y –≤ %H:00')}"
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await manager.next()
